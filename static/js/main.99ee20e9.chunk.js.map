{"version":3,"sources":["pages/Overview.mdx","hooks/useForceUpdate.ts","components/RenderCounter.tsx","examples/components/ChildComponents.tsx","examples/components/Components.tsx","pages/Components.mdx","examples/components/ClassComponent.tsx","pages/ClassComponent.mdx","examples/components/PureComponent.tsx","pages/PureComponent.mdx","examples/components/FunctionComponent.tsx","pages/FunctionComponent.mdx","examples/components/MethodComponent.tsx","pages/MethodComponent.mdx","pages/Hooks.mdx","examples/context/ContextMemoized.tsx","examples/context/ContextSeparate.tsx","examples/context/ContextSelector.tsx","examples/context/ContextUnmemoized.tsx","pages/Context.mdx","pages/Immutability.mdx","pages/Links.mdx","app.tsx","components/mdx/index.ts","components/mdx/Code.tsx","serviceWorker.ts","index.tsx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","isMDXComponent","useForceValueUpdate","changeProps","React","useState","value","setIt","useForceUpdate","RenderCounter","memo","counter","useRef","current","style","borderStyle","borderWidth","borderColor","color","position","width","marginTop","marginBottom","right","top","background","fontFamily","padding","children","ChildClassComponent","this","Component","ChildClassComponentMemoized","nextProps","ChildClassComponentWithObjectPropsStr","obj","str","ChildClassComponentWithObjectPropsNum","num","ChildClassComponentWithObjectPropsMemoizedStr","ChildClassComponentWithObjectPropsMemoizedNum","ChildPureComponent","PureComponent","ChildPureComponentMemoized","ChildPureComponentWithObjectPropsStr","ChildPureComponentWithObjectPropsNum","ChildPureComponentWithObjectPropsMemoizedStr","ChildPureComponentWithObjectPropsMemoizedNum","ChildFunctionComponent","ChildFunctionComponentMemoized","ChildFunctionComponentWithObjectPropsStr","ChildFunctionComponentWithObjectPropsNum","ChildFunctionComponentWithObjectPropsMemoizedStr","prevProps","ChildFunctionComponentWithObjectPropsMemoizedNum","update","isMemoized","onClick","parentName","Components","PlainPropsClassComponent","ObjectPropsClassComponent","initialValue","prevState","Math","round","random","note","PlainPropsPureComponent","ObjectPropsPureComponent","PlainPropsFunctionComponent","ObjectPropsFunctionComponent","ClassComponentWithMethodComponents","strMethodComponent","numMethodComponent","StrComponent","NumComponent","ClassComponent","Wrapper","isCorrect","setNum","setStr","prev","parseInt","Context","createContext","Provider","useMemo","JSON","stringify","Consumer","useContext","FooContext","BarContext","foo","bar","ConsumerFoo","ConsumerBar","count","setCount","useContextSelector","v","ContextUnmemoized","ContextMemoized","ContextSeparate","ContextSelector","App","className","to","Suspense","fallback","path","component","FunctionComponent","MethodComponent","Hooks","Immutability","Links","exact","Overview","code","language","replace","defaultProps","theme","undefined","tokens","getLineProps","getTokenProps","map","line","i","key","token","Boolean","window","location","hostname","match","Typography","githubTheme","injectStyles","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99ee20e9.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Overview`}</h2>\n    <p>{`The project is created to experiment with different approaches to use\nReact and create a list of do's, dont's, problematic approaches and best\npractice in terms of performance, readability, extensibility and\nmaintainability.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\nexport const useForceValueUpdate = (\n  changeProps?: boolean\n): [() => void, number] => {\n  const initialValue = 1;\n  const [value, setIt] = React.useState<number>(initialValue);\n\n  return [() => setIt(value + 1), changeProps ? value : initialValue];\n};\n\nexport const useForceUpdate = () => {\n  const [, setIt] = React.useState<any>();\n\n  return () => setIt({});\n};\n","import React from 'react';\n\ntype RenderCounterProps = {\n  children: React.ReactNode;\n  color: string;\n  style?: React.CSSProperties;\n};\n\nconst RenderCounter = React.memo<RenderCounterProps>(props => {\n  const counter = React.useRef<number>(0);\n  counter.current += 1;\n\n  return (\n    <div\n      style={{\n        ...props.style,\n        borderStyle: 'solid',\n        borderWidth: 3,\n        borderColor: props.color,\n        position: 'relative',\n        width: '70%',\n        marginTop: 4,\n        marginBottom: 4\n      }}\n    >\n      <div\n        style={{\n          position: 'absolute',\n          right: 0,\n          top: 0,\n          background: 'black',\n          color: 'white',\n          fontFamily: 'monospace',\n          padding: 2\n        }}\n      >\n        Render count: {counter.current}\n      </div>\n      {props.children}\n    </div>\n  );\n});\n\nexport default RenderCounter;\n","import React, { Component, FunctionComponent, PureComponent } from 'react';\nimport RenderCounter from '../../components/RenderCounter';\nimport { TValue, TObjectProps } from './common';\n\nexport class ChildClassComponent extends Component<TValue> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentMemoized extends Component<TValue> {\n  shouldComponentUpdate(nextProps: Readonly<TValue>) {\n    return nextProps.value !== this.props.value;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentWithObjectPropsStr extends Component<\n  TObjectProps\n> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentWithObjectPropsNum extends Component<\n  TObjectProps\n> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.obj.num}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentWithObjectPropsMemoizedStr extends Component<\n  TObjectProps\n> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    return nextProps.obj.str !== this.props.obj.str;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildClassComponentWithObjectPropsMemoizedNum extends Component<\n  TObjectProps\n> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    return nextProps.obj.num !== this.props.obj.num;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.obj.num}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponent extends PureComponent<TValue> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentMemoized extends PureComponent<TValue> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component <strong>Memoized</strong>: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentWithObjectPropsStr extends PureComponent<\n  TObjectProps\n> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentWithObjectPropsNum extends PureComponent<\n  TObjectProps\n> {\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.obj.num}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentWithObjectPropsMemoizedStr extends PureComponent<\n  TObjectProps\n> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    return nextProps.obj.str !== this.props.obj.str;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component <strong>Memoized</strong>: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n\nexport class ChildPureComponentWithObjectPropsMemoizedNum extends PureComponent<\n  TObjectProps\n> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    return nextProps.obj.num !== this.props.obj.num;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component <strong>Memoized</strong>: {this.props.obj.num}\n      </RenderCounter>\n    );\n  }\n}\n\nexport const ChildFunctionComponent: FunctionComponent<TValue> = (\n  props: TValue\n) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.value}\n    </RenderCounter>\n  );\n};\n\nexport const ChildFunctionComponentMemoized: FunctionComponent<TValue> = React.memo<\n  FunctionComponent<TValue>\n>((props: TValue) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component <strong>Memoized</strong>: {props.value}\n    </RenderCounter>\n  );\n});\n\nexport const ChildFunctionComponentWithObjectPropsStr: FunctionComponent<TObjectProps> = (\n  props: TObjectProps\n) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.obj.str}\n    </RenderCounter>\n  );\n};\n\nexport const ChildFunctionComponentWithObjectPropsNum: FunctionComponent<TObjectProps> = (\n  props: TObjectProps\n) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.obj.num}\n    </RenderCounter>\n  );\n};\n\nexport const ChildFunctionComponentWithObjectPropsMemoizedStr: FunctionComponent<TObjectProps> = React.memo<\n  FunctionComponent<TObjectProps>\n>(\n  (props: TObjectProps) => {\n    return (\n      <RenderCounter color=\"blue\">\n        Child Function Component <strong>Memoized</strong>: {props.obj.str}\n      </RenderCounter>\n    );\n  },\n  (prevProps: Readonly<TObjectProps>, nextProps: Readonly<TObjectProps>) => {\n    return prevProps.obj.str === nextProps.obj.str;\n  }\n);\n\nexport const ChildFunctionComponentWithObjectPropsMemoizedNum: FunctionComponent<TObjectProps> = React.memo<\n  FunctionComponent<TObjectProps>\n>(\n  (props: TObjectProps) => {\n    return (\n      <RenderCounter color=\"blue\">\n        Child Function Component <strong>Memoized</strong>: {props.obj.num}\n      </RenderCounter>\n    );\n  },\n  (prevProps: Readonly<TObjectProps>, nextProps: Readonly<TObjectProps>) => {\n    return prevProps.obj.num === nextProps.obj.num;\n  }\n);\n","import React from 'react';\nimport { useForceValueUpdate } from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildClassComponent,\n  ChildPureComponent,\n  ChildFunctionComponent,\n  ChildClassComponentMemoized,\n  ChildFunctionComponentMemoized,\n  ChildPureComponentMemoized\n} from './ChildComponents';\nimport { TProps } from './common';\n\nexport default (props: TProps) => {\n  const [update, value] = useForceValueUpdate(props.changeProps);\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <>\n          <ChildClassComponentMemoized value={value} />\n          <ChildPureComponentMemoized value={value} />\n          <ChildFunctionComponentMemoized value={value} />\n        </>\n      ) : (\n        <>\n          <ChildClassComponent value={value} />\n          <ChildPureComponent value={value} />\n          <ChildFunctionComponent value={value} />\n        </>\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => update()}>Render example</button>\n    </RenderCounter>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport Components from '../examples/components/Components.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Components`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-component.html\"\n      }}><inlineCode parentName=\"a\">{`React.Component`}</inlineCode></a>{` encapsulates `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/state-and-lifecycle.html\"\n      }}>{`State and Lifecycle`}</a>{`.`}</p>\n    <p>{`There are few types o the components available in React:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Class Component`}</strong>{` - the component which extends `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/react-api.html#reactcomponent\"\n        }}><inlineCode parentName=\"a\">{`React.Component`}</inlineCode></a>{` and uses OOP paradigms to handle state, properties, actions and manage component lifecycle. React component re-renders if the parent component got re-rendered even if no props were changed.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Pure Component`}</strong>{` - the `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/react-api.html#reactpurecomponent\"\n        }}><inlineCode parentName=\"a\">{`React.PureComponent`}</inlineCode></a>{` is similar to the `}<inlineCode parentName=\"li\">{`React.Component`}</inlineCode>{`. The difference between them is that `}<inlineCode parentName=\"li\">{`React.Component`}</inlineCode>{` doesn’t implement `}<inlineCode parentName=\"li\">{`shouldComponentUpdate()`}</inlineCode>{`, but `}<inlineCode parentName=\"li\">{`React.PureComponent`}</inlineCode>{` implements it with a `}<strong parentName=\"li\">{`shallow prop and state comparison`}</strong>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Function Component`}</strong>{` - the `}<a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/components-and-props.html#function-and-class-components\"\n        }}><inlineCode parentName=\"a\">{`React.FunctionComponent`}</inlineCode></a>{` is the component which takes props and renders them based on internal component logic.`}</li>\n    </ul>\n    <h3>{`Regular components no props change`}</h3>\n    <p>{`If there is no any additional work on the child components done the `}<inlineCode parentName=\"p\">{`Class`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Function`}</inlineCode>{` children components will re-render even if `}<strong parentName=\"p\">{`no properties have been changed`}</strong>{`.`}</p>\n    <p>{`As `}<inlineCode parentName=\"p\">{`Pure`}</inlineCode>{` component implements shallow comparison of the props out of the box, it won't re-render.`}</p>\n    <Components isMemoized={false} changeProps={false} mdxType=\"Components\" />\n    <h3>{`Regular components props change`}</h3>\n    <p>{`If `}<strong parentName=\"p\">{`any prop has been changed`}</strong>{` on any of the component type: `}<inlineCode parentName=\"p\">{`Class`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Pure`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Function`}</inlineCode>{` all of them will re-render and this is `}<strong parentName=\"p\">{`expected`}</strong>{` behavior.`}</p>\n    <Components isMemoized={false} changeProps={true} mdxType=\"Components\" />\n    <h3>{`Memoized components no props change`}</h3>\n    <p>{`Components should be \"memoized\" to prevent re-rendering when no props have been changed.`}</p>\n    <p>{`The \"memoziation\" techniques described in the corresponding section of each component type.`}</p>\n    <p>{`The only `}<inlineCode parentName=\"p\">{`Pure`}</inlineCode>{` component has this functionality out of the box and no additional work for such component required.`}</p>\n    <Components isMemoized={true} changeProps={false} mdxType=\"Components\" />\n    <h3>{`Memoized components props change`}</h3>\n    <p>{`If `}<strong parentName=\"p\">{`any prop has been changed`}</strong>{` on any of the component type: `}<inlineCode parentName=\"p\">{`Class`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Pure`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`Function`}</inlineCode>{` all of them will re-render even if they are \"memoized\" and this is `}<strong parentName=\"p\">{`expected`}</strong>{` behavior.`}</p>\n    <Components isMemoized={true} changeProps={true} mdxType=\"Components\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { FC, useState } from 'react';\nimport { useForceValueUpdate } from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildClassComponent,\n  ChildClassComponentMemoized,\n  ChildClassComponentWithObjectPropsMemoizedStr,\n  ChildClassComponentWithObjectPropsMemoizedNum,\n  ChildClassComponentWithObjectPropsStr,\n  ChildClassComponentWithObjectPropsNum\n} from './ChildComponents';\nimport { TProps, TObjectValue } from './common';\n\nexport const PlainPropsClassComponent: FC<TProps> = (props: TProps) => {\n  const [update, value] = useForceValueUpdate(props.changeProps);\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <ChildClassComponentMemoized value={value} />\n      ) : (\n        <ChildClassComponent value={value} />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </RenderCounter>\n  );\n};\n\nexport const ObjectPropsClassComponent: FC<TProps> = (props: TProps) => {\n  const initialValue: TObjectValue = {\n    num: 1,\n    str: 'hello'\n  };\n  const [value, setIt] = useState<TObjectValue>(initialValue);\n  const setNum = () =>\n    setIt(prevState => ({ num: prevState.num + 1, str: prevState.str }));\n  const setStr = () =>\n    setIt(prevState => ({\n      num: prevState.num,\n      str: `${initialValue.str} ${Math.round(Math.random() * 100)}`\n    }));\n\n  const update = props.changeProps ? setStr : setNum;\n  const note = props.changeProps\n    ? `str property changes, num remains unchanged: { num: ${value.num}, str: ${value.str} }`\n    : `num property changes, str remains unchanged: { num: ${value.num}, str: ${value.str} }`;\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <>\n          <ChildClassComponentWithObjectPropsMemoizedNum obj={value} />\n          <ChildClassComponentWithObjectPropsMemoizedStr obj={value} />\n        </>\n      ) : (\n        <>\n          <ChildClassComponentWithObjectPropsNum obj={value} />\n          <ChildClassComponentWithObjectPropsStr obj={value} />\n        </>\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => update()}>Render example</button>&nbsp;\n      <span>{note}</span>\n    </RenderCounter>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport {\n  PlainPropsClassComponent,\n  ObjectPropsClassComponent\n} from '../examples/components/ClassComponent.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Class Component`}</h2>\n    <p><strong parentName=\"p\">{`Class Component`}</strong>{` - the component which extends `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-api.html#reactcomponent\"\n      }}><inlineCode parentName=\"a\">{`React.Component`}</inlineCode></a>{` and uses OOP paradigms to handle state, properties, actions and manage component lifecycle. React component re-renders if the parent component got re-rendered even if no props were changed.`}</p>\n    <h3>{`Regular Component - Plain props`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponent extends Component<TValue> {\n  render() {\n    // if parent component updates this component will be re-rendered 💣,\n    // no matter if the props have been changed or not.\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <PlainPropsClassComponent isMemoized={false} mdxType=\"PlainPropsClassComponent\" />\n    <h3>{`Solution 1: Override `}<inlineCode parentName=\"h3\">{`shouldComponentUpdate()`}</inlineCode>{` lifecycle method`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponentMemoized extends Component<TValue> {\n  // ✅ place the logic to detect if component should update or not.\n  shouldComponentUpdate(nextProps: Readonly<TValue>) {\n    // 💡 the logic here might become very complicated,\n    // make sure you split components to the small or\n    // consider using Pure or Function components.\n    return nextProps.value !== this.props.value;\n  }\n\n  // ✅ the component re-renders only if props have been changed.\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <PlainPropsClassComponent isMemoized={true} changeProps={false} mdxType=\"PlainPropsClassComponent\" />\n    <p>{`and it re-renders as expected, when props have been changes.`}</p>\n    <PlainPropsClassComponent isMemoized={true} changeProps={true} mdxType=\"PlainPropsClassComponent\" />\n    <h3>{`Solution 2: Use Pure Component`}</h3>\n    <p>{`Consider using Pure Component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildPureComponent extends PureComponent<TValue> {\n  // \\`Pure\\` component implements \\`shouldComponentUpdate()\\` with a shallow prop and state comparison.\n  // That means no additional changes needed for the plain props.\n  // ✅ Component does not re-render if parent component re-renders\n  // but the props have not been changed.\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <hr></hr>\n    <h3>{`Regular Component - Object props`}</h3>\n    <p>{`Passing objects as properties to the component are dangerous in terms of causing not wanted re-rendering.\nIf component needs to work only with subset of the object properties and none of them being changed,\nthe component still might re-render if any of the other property has changed.`}</p>\n    <p>{`Also, even if developer created the object and passes it as a parameter to the component,\nit doesn't prevent other developers to add their own properties to the same object without\neven knowing that it might have negative impact on re-rendering some other not related component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export type TObjectProps = {\n  obj: TObjectValue;\n};\n\nexport type TObjectValue = {\n  num: number;\n  str: string;\n};\n`}</code></pre>\n    <p>{`The component takes object properties as defined above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponentWithObjectProps extends Component<\n  TObjectProps\n> {\n  render() {\n    // The component only works with ✅ obj.str property and ignores ✅ obj.num\n    // If parent component doesn't change the ✅ obj.str, but changes ⛔ obj.num\n    // this component will still re-render 💣\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <p>{`When parent component changes `}<inlineCode parentName=\"p\">{`obj.num`}</inlineCode>{` and doesn't change `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{`, the component\nstill re-renders.`}</p>\n    <ObjectPropsClassComponent isMemoized={false} mdxType=\"ObjectPropsClassComponent\" />\n    <h3>{`Solution 1: Use plain props`}</h3>\n    <p>{`The best solution is to use plain props and pass primitive values to the component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponentWithObjectProps extends Component<{\n  str: string;\n}> {\n  // ❗ even is you use plain props, make sule you also override shouldComponentUpdate()\n  // othervise force update will trigger re-rendering.\n  shouldComponentUpdate(nextProps: Readonly<{ str: string }>) {\n    return nextProps.str !== this.props.str;\n  }\n\n  render() {\n    // ✅ No object which can impact re-rendering\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component: {this.props.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <h3>{`Solution 2: Override `}<inlineCode parentName=\"h3\">{`shouldComponentUpdate()`}</inlineCode>{` lifecycle method`}</h3>\n    <p>{`When parent component changes `}<inlineCode parentName=\"p\">{`obj.num`}</inlineCode>{` and doesn't change `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{`, the component\n`}<strong parentName=\"p\">{`does not`}</strong>{` re-render.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildClassComponentWithObjectPropsMemoized extends Component<\n  TObjectProps\n> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    // ✅ Make sure you cover scenario, when other developer\n    // could potentially add other fields to the props object\n    return nextProps.obj.str !== this.props.obj.str;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Class Component <strong>Memoized</strong>: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <ObjectPropsClassComponent isMemoized={true} changeProps={false} mdxType=\"ObjectPropsClassComponent\" />\n    <p>{`but when parent component changes `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{` re-rendering happens, as expected:`}</p>\n    <ObjectPropsClassComponent isMemoized={true} changeProps={true} mdxType=\"ObjectPropsClassComponent\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { FC, useState } from 'react';\nimport { useForceValueUpdate } from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildPureComponent,\n  ChildPureComponentMemoized,\n  ChildPureComponentWithObjectPropsMemoizedStr,\n  ChildPureComponentWithObjectPropsMemoizedNum,\n  ChildPureComponentWithObjectPropsStr,\n  ChildPureComponentWithObjectPropsNum\n} from './ChildComponents';\nimport { TProps, TObjectValue } from './common';\n\nexport const PlainPropsPureComponent: FC<TProps> = (props: TProps) => {\n  const [update, value] = useForceValueUpdate(props.changeProps);\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <ChildPureComponentMemoized value={value} />\n      ) : (\n        <ChildPureComponent value={value} />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </RenderCounter>\n  );\n};\n\nexport const ObjectPropsPureComponent: FC<TProps> = (props: TProps) => {\n  const initialValue: TObjectValue = {\n    num: 1,\n    str: 'hello'\n  };\n  const [value, setIt] = useState<TObjectValue>(initialValue);\n  const setNum = () =>\n    setIt(prevState => ({ num: prevState.num + 1, str: prevState.str }));\n  const setStr = () =>\n    setIt(prevState => ({\n      num: prevState.num,\n      str: `${initialValue.str} ${Math.round(Math.random() * 100)}`\n    }));\n\n  const update = props.changeProps ? setStr : setNum;\n  const note = props.changeProps\n    ? `str property changes, num remains unchanged: { num: ${value.num}, str: ${value.str} }`\n    : `num property changes, str remains unchanged: { num: ${value.num}, str: ${value.str} }`;\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <>\n          <ChildPureComponentWithObjectPropsMemoizedNum obj={value} />\n          <ChildPureComponentWithObjectPropsMemoizedStr obj={value} />\n        </>\n      ) : (\n        <>\n          <ChildPureComponentWithObjectPropsNum obj={value} />\n          <ChildPureComponentWithObjectPropsStr obj={value} />\n        </>\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => update()}>Render example</button>&nbsp;\n      <span>{note}</span>\n    </RenderCounter>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport {\n  PlainPropsPureComponent,\n  ObjectPropsPureComponent\n} from '../examples/components/PureComponent.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Pure Component`}</h2>\n    <p><strong parentName=\"p\">{`Pure Component`}</strong>{` - the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-api.html#reactpurecomponent\"\n      }}><inlineCode parentName=\"a\">{`React.PureComponent`}</inlineCode></a>{` is similar to the `}<inlineCode parentName=\"p\">{`React.Component`}</inlineCode>{`. The difference between them is that `}<inlineCode parentName=\"p\">{`React.Component`}</inlineCode>{` doesn’t implement `}<inlineCode parentName=\"p\">{`shouldComponentUpdate()`}</inlineCode>{`, but `}<inlineCode parentName=\"p\">{`React.PureComponent`}</inlineCode>{` implements it with a `}<strong parentName=\"p\">{`shallow prop and state comparison`}</strong>{`.`}</p>\n    <p>{`If your React component’s `}<inlineCode parentName=\"p\">{`render()`}</inlineCode>{` function renders the same result given the same props and state, you can use `}<inlineCode parentName=\"p\">{`React.PureComponent`}</inlineCode>{` for a performance boost in some cases.`}</p>\n    <h3>{`Regular Component - Plain props`}</h3>\n    <p><inlineCode parentName=\"p\">{`Pure`}</inlineCode>{` component implements `}<inlineCode parentName=\"p\">{`shouldComponentUpdate()`}</inlineCode>{` with a `}<strong parentName=\"p\">{`shallow prop and state comparison`}</strong>{`.\nThat means no additional changes needed for the plain props.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildPureComponent extends PureComponent<TValue> {\n  // \\`Pure\\` component implements \\`shouldComponentUpdate()\\` with a **shallow prop and state comparison**.\n  // That means no additional changes needed for the plain props.\n  // ✅ Component does not re-render if parent component re-renders\n  // but the props have not been changed.\n  render() {\n    return (\n      <RenderCounter color=\"green\">\n        Child Pure Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <PlainPropsPureComponent isMemoized={false} mdxType=\"PlainPropsPureComponent\" />\n    <p>{`and it re-renders as expected, when props have been changes.`}</p>\n    <PlainPropsPureComponent isMemoized={true} changeProps={true} mdxType=\"PlainPropsPureComponent\" />\n    <hr></hr>\n    <h3>{`Regular Component - Object props`}</h3>\n    <p>{`Passing objects as properties to the component are dangerous in terms of causing not wanted re-rendering.\nIf component needs to work only with subset of the object properties and none of them being changed,\nthe component still might re-render if any of the other property has changed.`}</p>\n    <p>{`Also, even if developer created the object and passes it as a parameter to the component,\nit doesn't prevent other developers to add their own properties to the same object without\neven knowing that it might have negative impact on re-rendering some other not related component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export type TObjectProps = {\n  obj: TObjectValue;\n};\n\nexport type TObjectValue = {\n  num: number;\n  str: string;\n};\n`}</code></pre>\n    <p>{`The component takes object properties as defined above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildPureComponentWithObjectProps extends PureComponent<\n  TObjectProps\n> {\n  render() {\n    // The component only works with ✅ obj.str property and ignores ✅ obj.num\n    // If parent component doesn't change the ✅ obj.str, but changes ⛔ obj.num\n    // this component will still re-render 💣\n    return (\n      <RenderCounter color=\"red\">\n        Child Pure Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <p>{`When parent component changes `}<inlineCode parentName=\"p\">{`obj.num`}</inlineCode>{` and doesn't change `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{`, the component\nstill re-renders. This happens, because `}<inlineCode parentName=\"p\">{`PureComponent`}</inlineCode>{` does a `}<strong parentName=\"p\">{`shallow`}</strong>{` comparison.`}</p>\n    <ObjectPropsPureComponent isMemoized={false} mdxType=\"ObjectPropsPureComponent\" />\n    <h3>{`Solution 1: Use plain props`}</h3>\n    <p>{`The best solution is to use plain props and pass primitive values to the component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildPureComponentWithObjectProps extends PureComponent<{\n  str: string;\n}> {\n  render() {\n    // ✅ No object which can impact re-rendering\n    return (\n      <RenderCounter color=\"red\">\n        Child Pure Component: {this.props.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <h3>{`Solution 2: Override `}<inlineCode parentName=\"h3\">{`shouldComponentUpdate()`}</inlineCode>{` lifecycle method`}</h3>\n    <p>{`When parent component changes `}<inlineCode parentName=\"p\">{`obj.num`}</inlineCode>{` and doesn't change `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{`, the component\n`}<strong parentName=\"p\">{`does not`}</strong>{` re-render.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export class ChildPureComponentWithObjectPropsMemoized extends PureComponent<\n  TObjectProps\n> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    // ✅ Make sure you cover scenario, when other developer\n    // could potentially add other fields to the props object\n    return nextProps.obj.str !== this.props.obj.str;\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        Child Pure Component <strong>Memoized</strong>: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <ObjectPropsPureComponent isMemoized={true} changeProps={false} mdxType=\"ObjectPropsPureComponent\" />\n    <p>{`but when parent component changes `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{` re-rendering happens, as expected:`}</p>\n    <ObjectPropsPureComponent isMemoized={true} changeProps={true} mdxType=\"ObjectPropsPureComponent\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React, { FC, useState } from 'react';\nimport { useForceValueUpdate } from '../../hooks/useForceUpdate';\nimport RenderCounter from '../../components/RenderCounter';\nimport {\n  ChildFunctionComponent,\n  ChildFunctionComponentMemoized,\n  ChildFunctionComponentWithObjectPropsStr,\n  ChildFunctionComponentWithObjectPropsNum,\n  ChildFunctionComponentWithObjectPropsMemoizedStr,\n  ChildFunctionComponentWithObjectPropsMemoizedNum\n} from './ChildComponents';\nimport { TProps, TObjectValue } from './common';\n\nexport const PlainPropsFunctionComponent: FC<TProps> = (props: TProps) => {\n  const [update, value] = useForceValueUpdate(props.changeProps);\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <ChildFunctionComponentMemoized value={value} />\n      ) : (\n        <ChildFunctionComponent value={value} />\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </RenderCounter>\n  );\n};\n\nexport const ObjectPropsFunctionComponent: FC<TProps> = (props: TProps) => {\n  const initialValue: TObjectValue = {\n    num: 1,\n    str: 'hello'\n  };\n  const [value, setIt] = useState<TObjectValue>(initialValue);\n  const setNum = () =>\n    setIt(prevState => ({ num: prevState.num + 1, str: prevState.str }));\n  const setStr = () =>\n    setIt(prevState => ({\n      num: prevState.num,\n      str: `${initialValue.str} ${Math.round(Math.random() * 100)}`\n    }));\n\n  const update = props.changeProps ? setStr : setNum;\n  const note = props.changeProps\n    ? `str property changes, num remains unchanged: { num: ${value.num}, str: ${value.str} }`\n    : `num property changes, str remains unchanged: { num: ${value.num}, str: ${value.str} }`;\n\n  return (\n    <RenderCounter color=\"black\">\n      <p>Container</p>\n      {props.isMemoized ? (\n        <>\n          <ChildFunctionComponentWithObjectPropsMemoizedNum obj={value} />\n          <ChildFunctionComponentWithObjectPropsMemoizedStr obj={value} />\n        </>\n      ) : (\n        <>\n          <ChildFunctionComponentWithObjectPropsNum obj={value} />\n          <ChildFunctionComponentWithObjectPropsStr obj={value} />\n        </>\n      )}\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => update()}>Render example</button>&nbsp;\n      <span>{note}</span>\n    </RenderCounter>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport {\n  PlainPropsFunctionComponent,\n  ObjectPropsFunctionComponent\n} from '../examples/components/FunctionComponent.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Function Component`}</h2>\n    <p><strong parentName=\"p\">{`Function Component`}</strong>{` - the `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/components-and-props.html#function-and-class-components\"\n      }}><inlineCode parentName=\"a\">{`React.FunctionComponent`}</inlineCode></a>{` is the component which takes props and renders them based on internal component logic.`}</p>\n    <h3>{`Regular Component - Plain props`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// Component is not memoized the parent re-render triggers this component to re-render 💣 too\n// even if no props have been changed.\nexport const ChildFunctionComponent: FunctionComponent<TValue> = (\n  props: TValue\n) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.value}\n    </RenderCounter>\n  );\n};\n`}</code></pre>\n    <PlainPropsFunctionComponent isMemoized={false} mdxType=\"PlainPropsFunctionComponent\" />\n    <h3>{`Solution: Memoize component with React.memo()`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/react-api.html#reactmemo\"\n      }}><inlineCode parentName=\"a\">{`React.memo`}</inlineCode></a>{` is a higher order component. It’s similar to `}<inlineCode parentName=\"p\">{`React.PureComponent`}</inlineCode>{` but for function components instead of classes.`}</p>\n    <p>{`If your function component renders the same result given the same props, you can wrap it in a call to `}<inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.`}</p>\n    <p><inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` only affects props changes. If your function component wrapped in `}<inlineCode parentName=\"p\">{`React.memo`}</inlineCode>{` has a `}<inlineCode parentName=\"p\">{`useState`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`useContext`}</inlineCode>{` Hook in its implementation, it will still rerender when state or context change.`}</p>\n    <p>{`By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can also provide a custom comparison function as the second argument.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// ✅ Memoize component to make sure it doesn't re-render, when props have been changed.\nexport const ChildFunctionComponentMemoized: FunctionComponent<TValue> = React.memo<\n  FunctionComponent<TValue>\n>((props: TValue) => {\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component <strong>Memoized</strong>: {props.value}\n    </RenderCounter>\n  );\n});\n`}</code></pre>\n    <PlainPropsFunctionComponent isMemoized={true} changeProps={false} mdxType=\"PlainPropsFunctionComponent\" />\n    <p>{`and it re-renders as expected, when props have been changes.`}</p>\n    <PlainPropsFunctionComponent isMemoized={true} changeProps={true} mdxType=\"PlainPropsFunctionComponent\" />\n    <hr></hr>\n    <h3>{`Regular Component - Object props`}</h3>\n    <p>{`Passing objects as properties to the component are dangerous in terms of causing not wanted re-rendering.\nIf component needs to work only with subset of the object properties and none of them being changed,\nthe component still might re-render if any of the other property has changed.`}</p>\n    <p>{`Also, even if developer created the object and passes it as a parameter to the component,\nit doesn't prevent other developers to add their own properties to the same object without\neven knowing that it might have negative impact on re-rendering some other not related component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export type TObjectProps = {\n  obj: TObjectValue;\n};\n\nexport type TObjectValue = {\n  num: number;\n  str: string;\n};\n`}</code></pre>\n    <p>{`The component takes object properties as defined above:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const ChildFunctionComponentWithObjectProps: FunctionComponent<TObjectProps> = (\n  props: TObjectProps\n) => {\n  // The component only works with ✅ obj.str property and ignores ✅ obj.num\n  // If parent component doesn't change the ✅ obj.str, but changes ⛔ obj.num\n  // this component will still re-render 💣\n  return (\n    <RenderCounter color=\"blue\">\n      Child Function Component: {props.obj.str}\n    </RenderCounter>\n  );\n};\n`}</code></pre>\n    <p>{`When parent component changes `}<inlineCode parentName=\"p\">{`obj.num`}</inlineCode>{` and doesn't change `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{`, the component\nstill re-renders.`}</p>\n    <h3>{`Solution 1: Use plain props`}</h3>\n    <p>{`The best solution is to use plain props and pass primitive values to the component.\nDon't forget to memoize the props value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// ✅ Memoize component to make sure it doesn't re-render, when props have been changed.\nexport const ChildFunctionComponentMemoized: FunctionComponent<{\n  str: strings;\n}> = React.memo<FunctionComponent<{ str: strings }>>(\n  (props: { str: strings }) => {\n    return (\n      <RenderCounter color=\"blue\">\n        Child Function Component <strong>Memoized</strong>: {props.str}\n      </RenderCounter>\n    );\n  }\n);\n`}</code></pre>\n    <h2>{`Solution 2: Add comparison function`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const ChildFunctionComponentWithObjectPropsMemoized: FunctionComponent<TObjectProps> = React.memo<\n  FunctionComponent<TObjectProps>\n>(\n  (props: TObjectProps) => {\n    return (\n      <RenderCounter color=\"blue\">\n        Child Function Component <strong>Memoized</strong>: {props.obj.str}\n      </RenderCounter>\n    );\n  },\n  // ✅ Add the properties comparison function.\n  (prevProps: Readonly<TObjectProps>, nextProps: Readonly<TObjectProps>) => {\n    return prevProps.obj.str === nextProps.obj.str;\n  }\n);\n`}</code></pre>\n    <ObjectPropsFunctionComponent isMemoized={true} changeProps={false} mdxType=\"ObjectPropsFunctionComponent\" />\n    <p>{`but when parent component changes `}<inlineCode parentName=\"p\">{`obj.str`}</inlineCode>{` re-rendering happens, as expected:`}</p>\n    <ObjectPropsFunctionComponent isMemoized={true} changeProps={true} mdxType=\"ObjectPropsFunctionComponent\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import * as React from 'react';\nimport RenderCounter from '../../components/RenderCounter';\n\ninterface IClassComponentWithMethodComponentsProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponentWithMethodComponents extends React.PureComponent<\n  IClassComponentWithMethodComponentsProps\n> {\n  private strMethodComponent() {\n    const { str } = this.props;\n    return (\n      <RenderCounter color=\"blue\">\n        <p>\n          <i>str</i> is {str}\n        </p>\n      </RenderCounter>\n    );\n  }\n  private numMethodComponent() {\n    const { num } = this.props;\n    return (\n      <RenderCounter color=\"red\">\n        <p>\n          <i>num</i> is {num}\n        </p>\n      </RenderCounter>\n    );\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"yellow\">\n        <div>\n          {this.strMethodComponent()}\n          {this.numMethodComponent()}\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n\ninterface IStrComponentProps {\n  str: string;\n}\nconst StrComponent = React.memo(({ str }: IStrComponentProps) => (\n  <RenderCounter color=\"blue\">\n    <p>\n      <i>str</i> is {str}\n    </p>\n  </RenderCounter>\n));\n\ninterface INumComponentProps {\n  num: number;\n}\nclass NumComponent extends React.PureComponent<INumComponentProps> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        <p>\n          <i>num</i> is {this.props.num}\n        </p>\n      </RenderCounter>\n    );\n  }\n}\n\ninterface IClassComponentProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponent extends React.PureComponent<IClassComponentProps> {\n  render() {\n    return (\n      <RenderCounter color=\"yellow\">\n        <div>\n          <StrComponent str={this.props.str} />\n          <NumComponent num={this.props.num} />\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n\nexport const Wrapper = ({ isCorrect }: { isCorrect: boolean }) => {\n  const [num, setNum] = React.useState(1);\n  const [str, setStr] = React.useState('1');\n\n  return (\n    <div>\n      {isCorrect ? (\n        <ClassComponent num={num} str={str} />\n      ) : (\n        <ClassComponentWithMethodComponents num={num} str={str} />\n      )}\n      <button onClick={() => setStr(prev => `${parseInt(prev) + 1}`)}>\n        Update `str`\n      </button>\n      <button onClick={() => setNum(prev => prev + 1)}>Update `num`</button>\n    </div>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport {\n  Wrapper\n} from '../examples/components/MethodComponent.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Method Component`}</h2>\n    <p>{`Method Component is a component which was implemented as a `}<strong parentName=\"p\">{`method of Class Component`}</strong>{`.\nImplementing components this way will cause several issues:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Hard to maintain, components become tightly coupled`}</li>\n      <li parentName=\"ul\">{`Hard to control re-rendering conditions`}</li>\n      <li parentName=\"ul\">{`Hard to reuse such components`}</li>\n      <li parentName=\"ul\">{`Idiomatically React is functional and the approach is rather OOP`}</li>\n      <li parentName=\"ul\">{`Potentially may cause hooks related bugs (`}<a parentName=\"li\" {...{\n          \"href\": \"https://kentcdodds.com/blog/dont-call-a-react-function-component\"\n        }}>{`https://kentcdodds.com/blog/dont-call-a-react-function-component`}</a>{`)`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`interface IClassComponentWithMethodComponentsProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponentWithMethodComponents extends React.PureComponent<\n  IClassComponentWithMethodComponentsProps\n> {\n  private strMethodComponent() {\n    const { str } = this.props;\n    return (\n      <RenderCounter color=\"blue\">\n        <p>\n          <i>str</i> is {str}\n        </p>\n      </RenderCounter>\n    );\n  }\n  private numMethodComponent() {\n    const { num } = this.props;\n    return (\n      <RenderCounter color=\"red\">\n        <p>\n          <i>num</i> is {num}\n        </p>\n      </RenderCounter>\n    );\n  }\n\n  render() {\n    return (\n      <RenderCounter color=\"yellow\">\n        <div>\n          {this.strMethodComponent()}\n          {this.numMethodComponent()}\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <Wrapper mdxType=\"Wrapper\" />\n    <h3>{`Solution: Separated Components`}</h3>\n    <p>{`Every component has its scope and depends only on required props.\nIt allows us to easily refactor/remove a component and specify re-render conditions\nfor each component separately using `}<inlineCode parentName=\"p\">{`React.PureComponent`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`shouldComponentUpdate()`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`React.memo()`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`interface IStrComponentProps {\n  str: string;\n}\nconst StrComponent = React.memo(({ str }: IStrComponentProps) => (\n  <RenderCounter color=\"blue\">\n    <p>\n      <i>str</i> is {str}\n    </p>\n  </RenderCounter>\n));\n\ninterface INumComponentProps {\n  num: number;\n}\nclass NumComponent extends React.PureComponent<INumComponentProps> {\n  render() {\n    return (\n      <RenderCounter color=\"red\">\n        <p>\n          <i>num</i> is {this.props.num}\n        </p>\n      </RenderCounter>\n    );\n  }\n}\n\ninterface IClassComponentProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponent extends React.PureComponent<IClassComponentProps> {\n  render() {\n    return (\n      <RenderCounter color=\"yellow\">\n        <div>\n          <StrComponent str={this.props.str} />\n          <NumComponent num={this.props.num} />\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n`}</code></pre>\n    <Wrapper isCorrect mdxType=\"Wrapper\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Hooks`}</h2>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\n\nimport RenderCounter from '../../components/RenderCounter';\nimport { useForceUpdate } from '../../hooks/useForceUpdate';\n\ntype ContextValue = { value: number };\nconst Context = React.createContext<ContextValue>({ value: 1 });\n\nconst Provider: React.FC = props => {\n  const value = React.useMemo(() => ({ value: 1 }), []);\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={value}>\n        <div>\n          <code>Provider: {JSON.stringify(value, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst Consumer: React.FC = React.memo(() => {\n  const value = React.useContext(Context);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>Consumer: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nexport default () => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      <Provider>\n        <Consumer />\n      </Provider>\n\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n","import React from 'react';\nimport RenderCounter from '../../components/RenderCounter';\n\ntype ContextValue = number;\n\nconst FooContext = React.createContext<ContextValue>(0);\nconst BarContext = React.createContext<ContextValue>(0);\n\nconst Provider: React.FC<{ foo: number; bar: number }> = props => {\n  const { foo, bar } = props;\n\n  return (\n    <RenderCounter color=\"blue\">\n      <FooContext.Provider value={foo}>\n        <BarContext.Provider value={bar}>\n          <div>\n            <code>Provider: {JSON.stringify({ foo, bar }, null, 2)}</code>\n          </div>\n          <div>{props.children}</div>\n        </BarContext.Provider>\n      </FooContext.Provider>\n    </RenderCounter>\n  );\n};\n\nconst ConsumerFoo: React.FC = React.memo(() => {\n  const value = React.useContext(FooContext);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>ConsumerFoo: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nconst ConsumerBar: React.FC = React.memo(() => {\n  const value = React.useContext(BarContext);\n\n  return (\n    <RenderCounter color=\"red\">\n      <code>ConsumerBar: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nexport default () => {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <>\n      <Provider foo={count} bar={1}>\n        <ConsumerFoo />\n        <ConsumerBar />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => setCount(count + 1)}>Render example</button>\n    </>\n  );\n};\n","import React from 'react';\nimport { createContext, useContextSelector } from 'use-context-selector';\n\nimport RenderCounter from '../../components/RenderCounter';\n\ntype ContextValue = { foo: number; bar: number };\n\nconst Context = createContext<ContextValue>({ foo: 0, bar: 0 });\n\nconst Provider: React.FC<{ foo: number; bar: number }> = props => {\n  const { foo, bar } = props;\n\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={{ foo, bar }}>\n        <div>\n          <code>Provider: {JSON.stringify({ foo, bar }, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst ConsumerFoo: React.FC = React.memo(() => {\n  const value = useContextSelector(Context, v => v.foo);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>ConsumerFoo: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nconst ConsumerBar: React.FC = React.memo(() => {\n  const value = useContextSelector(Context, v => v.bar);\n\n  return (\n    <RenderCounter color=\"red\">\n      <code>ConsumerBar: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nexport default () => {\n  const [count, setCount] = React.useState(0);\n\n  return (\n    <>\n      <Provider foo={count} bar={1}>\n        <ConsumerFoo />\n        <ConsumerBar />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={() => setCount(count + 1)}>Render example</button>\n    </>\n  );\n};\n","import React from 'react';\n\nimport RenderCounter from '../../components/RenderCounter';\nimport { useForceUpdate } from '../../hooks/useForceUpdate';\n\ntype ContextValue = { value: number };\nconst Context = React.createContext<ContextValue>({ value: 1 });\n\nconst Provider: React.FC = props => {\n  const value = { value: 1 };\n  return (\n    <RenderCounter color=\"blue\">\n      <Context.Provider value={value}>\n        <div>\n          <code>Provider: {JSON.stringify(value, null, 2)}</code>\n        </div>\n        <div>{props.children}</div>\n      </Context.Provider>\n    </RenderCounter>\n  );\n};\n\nconst Consumer: React.FC = React.memo(() => {\n  const value = React.useContext(Context);\n\n  return (\n    <RenderCounter color=\"green\">\n      <code>Consumer: {JSON.stringify(value, null, 2)}</code>\n    </RenderCounter>\n  );\n});\n\nexport default () => {\n  const update = useForceUpdate();\n\n  return (\n    <>\n      <Provider>\n        <Consumer />\n      </Provider>\n      <hr style={{ background: 'transparent' }} />\n      <button onClick={update}>Render example</button>\n    </>\n  );\n};\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport ContextMemoized from '../examples/context/ContextMemoized';\nimport ContextSeparate from '../examples/context/ContextSeparate';\nimport ContextSelectorExample from '../examples/context/ContextSelector';\nimport ContextUnmemoizedExample from '../examples/context/ContextUnmemoized';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h2>{`Context`}</h2>\n    <p>{`This page covers only modern React Context API, i.e. `}<a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/context.html\"\n      }}><inlineCode parentName=\"a\">{`createContext()`}</inlineCode></a>{`.`}</p>\n    <h3>{`Context behavior`}</h3>\n    <p>{`All consumers that are descendants of a `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` will re-render whenever the `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{`’s `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` prop changes. The propagation from `}<inlineCode parentName=\"p\">{`Provider`}</inlineCode>{` to its descendant consumers (including `}<inlineCode parentName=\"p\">{`.contextType`}</inlineCode>{` on class components and `}<inlineCode parentName=\"p\">{`useContext()`}</inlineCode>{` hook) is not subject to the `}<inlineCode parentName=\"p\">{`shouldComponentUpdate()`}</inlineCode>{` method or `}<inlineCode parentName=\"p\">{`React.memo()`}</inlineCode>{`, so the consumer is updated even when an ancestor component skips an update.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// 💡 React.memo will ignored\nconst Example = React.memo(props => {\n  // 💣 Updates will be triggered inside\n  const value = React.useContext(Context);\n\n  return <div />;\n});\n`}</code></pre>\n    <p>{`For example the code below will trigger rerender always as `}<inlineCode parentName=\"p\">{`context`}</inlineCode>{` object will be always newly created.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = props => {\n  const { children } = props;\n  // ⛔ ({ value: 1 } === { value: 1 }) is false, so reference is different\n  const context = { value: 1 };\n\n  return <Provider value={context}>{children}</Provider>;\n};\n`}</code></pre>\n    <ContextUnmemoizedExample mdxType=\"ContextUnmemoizedExample\" />\n    <h3>{`Solution 1: Use memoized context value`}</h3>\n    <p>{`If value is changing rarely is good option to memoize an object value with `}<inlineCode parentName=\"p\">{`useMemo()`}</inlineCode>{` hook.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = props => {\n  const { children, value } = props;\n  // ✅ Now new \\`context\\` will be recreated only on \\`value\\` change\n  const context = React.useMemo(() => ({ value }), [value]);\n\n  return <Provider value={context}>{children}</Provider>;\n};\n`}</code></pre>\n    <ContextMemoized mdxType=\"ContextMemoized\" />\n    <p>{`For class components you can use `}<inlineCode parentName=\"p\">{`this.state`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`class Example extends React.Component {\n  render() {\n    return <Provider value={this.state}>{children}</Provider>;\n  }\n}\n`}</code></pre>\n    <h3>{`Solution 2: Use separate contexts`}</h3>\n    <p>{`This trick was `}<a parentName=\"p\" {...{\n        \"href\": \"https://kentcdodds.com/blog/how-to-use-react-context-effectively\"\n      }}>{`described`}</a>{` by Kent Dodds. Idea is to pass plain/memoized\nvalues in separate contexts to avoid useless notifications to subscribers.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = props => {\n  const { children } = props;\n\n  // ❗ both values are plain and safe for shallow compare\n  const firstValue = 1;\n  const secondValue = 2;\n\n  return (\n    <FirstProvider value={firstValue}>\n      <SecondProvider value={secondValue}>{children}</SecondProvider>\n    </FirstProvider>\n  );\n};\n`}</code></pre>\n    <ContextSeparate mdxType=\"ContextSeparate\" />\n    <h3>{`Solution 3: Experimental bits API`}</h3>\n    <p>{`React provides an expiremental API with `}<inlineCode parentName=\"p\">{`calculateChangedBits`}</inlineCode>{` & `}<inlineCode parentName=\"p\">{`calculateChangedBits`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`function createContext<T>(defaultValue: T, calculateChangedBits?: (prev: T, next: T) => number): Context<T>;\nfunction useContext<T>(context: Context<T>, observedBits?: number|boolean): T;\n`}</code></pre>\n    <p>{`Which allows to change default behavior of Context API and avoid useless rerenders. As it's experimental there are no official docs yet, check `}<a parentName=\"p\" {...{\n        \"href\": \"https://medium.com/@leonardobrunolima/react-tips-context-api-performance-considerations-d964f3ad3087\"\n      }}>{`this article`}</a>{` to get more details.`}</p>\n    <p><inlineCode parentName=\"p\">{`changedBits === 0`}</inlineCode>{` has a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/facebook/react/blob/9b0bd43550206e04bfe9ca695e5981eff0e2d03f/packages/react-reconciler/src/ReactFiberBeginWork.js#L2304\"\n      }}>{`special handling`}</a>{` in `}<inlineCode parentName=\"p\">{`react-reconciler`}</inlineCode>{`, so the simplest and interesting trick is to disable any consumer's updates:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// ☠️ Even is \\`value\\` will change updates will be silenced\nconst Context = React.createContext(value, () => 0);\n`}</code></pre>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/package/use-context-selector\"\n      }}><inlineCode parentName=\"a\">{`use-context-selector`}</inlineCode></a>{` uses `}<inlineCode parentName=\"p\">{`changedBits === 0`}</inlineCode>{` to implement selector-like API for hooks which currently stays as an `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/reactjs/rfcs/pull/119\"\n      }}>{`open RFC`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`const Example = React.memo(props => {\n  // ✅ Updates of other context properties will be ignored\n  const locale = useContextSelector(LocaleContext, v => v.locale);\n\n  return <div>Current locale is {locale}.</div>;\n});\n`}</code></pre>\n    <ContextSelectorExample mdxType=\"ContextSelectorExample\" />\n    <p>{`There is also a lot of custom context/global state implementations, comparison\nfor Concurrent mode `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dai-shi/will-this-react-global-state-work-in-concurrent-mode\"\n      }}>{`available there`}</a>{`.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`State Immutability in React, why it is important, and how to achieve it using Immer`}</h2>\n    <p>{`React `}<em parentName=\"p\">{`props`}</em>{` and `}<em parentName=\"p\">{`state`}</em>{` are readonly by contract; it is, however, very easy to break this contract\nand introduce issues that are difficult to debug. In order to prevent these issues it is advised not\nto mutate state unless necessary. If non-trivial mutation of the current state is unvoidable, it is\nadvised to use an immutability helper called Immer.`}</p>\n    <p>{`In the text below we start with a piece of code\nthat doesn't work, we transform it into code that works, but is error-prone and unreadable, and eventually\nwe reach the state of well readable and easily maintainable code. As we go over these phases\nwe gradually build a case for using Immer.`}</p>\n    <h3>{`State mutation outside of setState mechanism`}</h3>\n    <p>{`React `}<em parentName=\"p\">{`state`}</em>{` is declared readonly, but that only means that the `}<em parentName=\"p\">{`reference`}</em>{` to it is constant. This\neffectively protects primitives from being changed, but it doesn't protect objects. The only sound\nmeans of state change in React is the `}<em parentName=\"p\">{`setState`}</em>{` method and any code that asserts it is correct in doing so.\nIn the example below, the `}<em parentName=\"p\">{`sumData`}</em>{` function rightfully asserts that the state object will not change\nand based on that it caches its output based on the state object's internal field \"data\".`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const data = state.data;\n  const sumData = React.useCallback(\n    () => data.reduce((acc, val) => acc + val, 0),\n    [data]\n  );\n\n  const run = () => {\n    // State mutated.\n    state.data = [1, 1];\n    // Sum is out of sync.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState({ data: state.data });\n  };\n`}</code></pre>\n    <p>{`However, the `}<em parentName=\"p\">{`run`}</em>{` function changes the state object -- its internal field `}<em parentName=\"p\">{`data`}</em>{` now points to a\ndifferent address. `}<em parentName=\"p\">{`sumData`}</em>{` captures the original address (that wasn't supposed to change), and therefore\nit will sum the original data.`}</p>\n    <p>{`The logical step in rectifying this seems to be to make `}<em parentName=\"p\">{`sumData`}</em>{` capture the entire state -- since it is\nreadonly we will be sure that we always refer to the correct address. It also seemingly makes sense not to construct\na new state object in `}<em parentName=\"p\">{`run`}</em>{` since we only change a single field inside of it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const sumData = React.useCallback(\n    () => state.data.reduce((acc, val) => acc + val, 0),\n    [state]\n  );\n\n  const run = () => {\n    // State mutated.\n    state.data = [1, 1];\n    // Sum is in sync.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState(state);\n  };\n`}</code></pre>\n    <p>{`The issue with this change is that now it doesn't work at all, because React asserts that since the\naddress of the state object hasn't changed, the object itself hasn't changed, and it will ignore the\nsetState call. The obvious solution is to copy the object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const sumData = React.useCallback(\n    () => state.data.reduce((acc, val) => acc + val, 0),\n    [state]\n  );\n\n  const run = () => {\n    state.data = [1, 1];\n    // Contract violation.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState({...state});\n  };\n`}</code></pre>\n    <p>{`Now the code will work. The issue with this code, however, is that it is breaking the immutability contract\nwith React and that it is prone to error. If the state object were to consist of multiple nested fields,\nwe would have to make sure that the object is copied properly to form a new state. Since there is no native\nconcept of \"deep copy\" in javascript, doing this can be rather cumbersome:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState(getCumbersomeState());\n\n  const getStateString = React.useCallback(() => JSON.stringify(state), [\n    state\n  ]);\n\n  const updateJillsStreet = () => {\n    // It is easy to get lost in this sea of spread operators and brackets.\n    setState(prevState => ({\n      people: [\n        { ...prevState.people[0] },\n        {\n          ...prevState.people[1],\n          addresses: [\n            {\n              ...prevState.people[1].addresses[0],\n              street: \\`Street \\${Math.random()}\\`\n            }\n          ]\n        }\n      ]\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <h3>{`Immer.js to the rescue`}</h3>\n    <p>{`And that is when Immer.js comes to the rescue. Immer.js uses ES6 proxies (note that when transcompiled to ES5\nit will become much slower) to record changes to a so called `}<em parentName=\"p\">{`draft`}</em>{` object during the execution of the `}<em parentName=\"p\">{`produce`}</em>{`\nfunction and then project them onto a new object that becomes the new state. The `}<em parentName=\"p\">{`draft`}</em>{` object is based on the existing\nstate that is passed to the `}<em parentName=\"p\">{`produce`}</em>{` function along with the draft callback. The following snippet demonstrates\nhow we go from cumbersome, ugly, and ureadable to straightforward, beautiful, and well readable:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState(getCumbersomeState());\n\n  const getStateString = React.useCallback(() => JSON.stringify(state), [\n    state\n  ]);\n\n  const updateJillsStreet = () => {\n    setState(\n      produce(state, _draft => {\n        _draft.people[1].addresses[0].street = \\`Street \\${Math.random()}\\`;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <p>{`This can be further simplified by using the `}<em parentName=\"p\">{`use-immer`}</em>{` npm package that provides us with a hook\nthat combines the native `}<em parentName=\"p\">{`React.useState`}</em>{` and Immer's `}<em parentName=\"p\">{`produce`}</em>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`export const Component: React.FunctionComponent = props => {\n  const [state, setState] = useImmer(getCumbersomeState());\n\n  const getStateString = React.useCallback(() => JSON.stringify(state), [\n    state\n  ]);\n\n  const updateJillsStreet = () => {\n    setState(_draft => {\n      _draft.people[1].addresses[0].street = \\`Street \\${Math.random()}\\`;\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n`}</code></pre>\n    <p>{`In the newly created state, fields that didn't change during the execution of the draft callback\nwill be referentially equal to the fields in the original state. Only fields that were changed\nin the draft and the root object will be new objects.`}</p>\n    <h3>{`Resources`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://immerjs.github.io/immer/docs/introduction\"\n        }}>{`https://immerjs.github.io/immer/docs/introduction`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Useful Links`}</h2>\n    <h3>{`Common Topics`}</h3>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://reactjs.org/docs/getting-started.html\"\n        }}>{`React JS`}</a>{` - the official ReactJS documentation.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet\"\n        }}>{`React+TypeScript Cheatsheets`}</a>{` - Cheatsheets for experienced React developers getting started with TypeScript`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://dev.to/codeartistryio/the-react-cheatsheet-for-2020-real-world-examples-4hgg\"\n        }}>{`The React Cheatsheet for 2020 📄‬`}</a>{` - The React Cheatsheet for 2020 📄‬ (+ real-world examples).`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://reactpatterns.com/\"\n        }}>{`React Patterns`}</a>{` - Get the latest React patterns, tips, and tricks right to your inbox.`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Overview from './pages/Overview.mdx';\nimport Components from './pages/Components.mdx';\nimport ClassComponent from './pages/ClassComponent.mdx';\nimport PureComponent from './pages/PureComponent.mdx';\nimport FunctionComponent from './pages/FunctionComponent.mdx';\nimport MethodComponent from './pages/MethodComponent.mdx';\nimport Hooks from './pages/Hooks.mdx';\nimport Context from './pages/Context.mdx';\nimport Immutability from './pages/Immutability.mdx';\nimport Links from './pages/Links.mdx';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"wrapper\">\n        <header>\n          <h1>React Patterns</h1>\n        </header>\n        <div className=\"main\">\n          <aside>\n            <ul>\n              <li>\n                <Link to=\"/\">Overview</Link>\n              </li>\n              <li>\n                <Link to=\"/components\">Components</Link>\n                <ul>\n                  <li>\n                    <Link to=\"/class-component\">Class Component</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/pure-component\">Pure Component</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/function-component\">Function Component</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/method-component\">Method Component</Link>\n                  </li>\n                </ul>\n              </li>\n              <li>\n                <Link to=\"/hooks\">Hooks</Link>\n              </li>\n              <li>\n                <Link to=\"/context\">Context</Link>\n              </li>\n              <li>\n                <Link to=\"/immutability\">Immutability</Link>\n              </li>\n              <li>\n                <Link to=\"/links\">Links</Link>\n              </li>\n            </ul>\n          </aside>\n          <main>\n            <React.Suspense fallback={<div>Loading...</div>}>\n              <Switch>\n                <Route path=\"/components\" component={Components} />\n                <Route path=\"/class-component\" component={ClassComponent} />\n                <Route path=\"/pure-component\" component={PureComponent} />\n                <Route\n                  path=\"/function-component\"\n                  component={FunctionComponent}\n                />\n                <Route path=\"/method-component\" component={MethodComponent} />\n                <Route path=\"/hooks\" component={Hooks} />\n                <Route path=\"/context\" component={Context} />\n                <Route path=\"/immutability\" component={Immutability} />\n                <Route path=\"/links\" component={Links} />\n                <Route exact path=\"/\" component={Overview} />\n              </Switch>\n            </React.Suspense>\n          </main>\n        </div>\n        <footer>\n          &copy; 2019, Sergii Mykhailov. <Link to=\"/\">React Patterns</Link>\n        </footer>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","import Code from './Code';\n\nexport default {\n  code: Code\n};\n","import Highlight, { defaultProps, Language } from 'prism-react-renderer';\nimport React from 'react';\n\nimport 'prism-themes/themes/prism-vs.css';\n\n// TODO: use typings when MDX2 will be released\ntype CodeProps = {\n  className?: string;\n  children?: string;\n};\n\nconst Code: React.FC<CodeProps> = props => {\n  const { className = 'language-jsx', children = '' } = props;\n  const language: Language = className.replace('language-', '') as any;\n  const code = children.replace(/\\n$/, '');\n\n  return (\n    <>\n      {/* CSS fix for empty lines */}\n      <style>{`.prism-code .token.plain { display: inline-block; }`}</style>\n      <style>{`.prism-code .token.comment { font-style: normal; }`}</style>\n\n      <Highlight\n        {...defaultProps}\n        code={code}\n        language={language}\n        theme={undefined} // CSS theme is used\n      >\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={{ ...style, padding: 3 }}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </>\n  );\n};\n\nexport default Code;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @ts-ignore\nimport { MDXProvider } from '@mdx-js/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Typography from 'typography';\n// @ts-ignore\nimport githubTheme from 'typography-theme-github';\n\nimport App from './app';\nimport components from './components/mdx';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst typography = new Typography(githubTheme);\ntypography.injectStyles();\n\nReactDOM.render(\n  <MDXProvider components={components}>\n    <App />\n  </MDXProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}