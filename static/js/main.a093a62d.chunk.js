(this["webpackJsonpreact-patterns"]=this["webpackJsonpreact-patterns"]||[]).push([[0],{31:function(e,t,n){e.exports=n(43)},42:function(e,t,n){},43:function(e,t,n){"use strict";n.r(t);var o=n(0),a=n(1),r=n.n(a),c=n(26),s=n.n(c),l=n(27),p=n.n(l),i=n(28),m=n.n(i),u=n(11),b=n(14),d=n(3),h={},j="wrapper";function O(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(j,Object.assign({},h,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Overview"),Object(o.b)("p",null,"The project is created to experiment with different approaches to use\nReact and create a list of do's, dont's, problematic approaches and best\npractice in terms of performance, readability, extensibility and\nmaintainability."))}O.isMDXComponent=!0;var g=n(2),C=function(e){var t=r.a.useState(1),n=Object(g.a)(t,2),o=n[0],a=n[1];return[function(){return a(o+1)},e?o:1]},f=function(){var e=r.a.useState(),t=Object(g.a)(e,2)[1];return function(){return t({})}},v=n(17),y=function(e){var t=r.a.useRef(0);return t.current+=1,r.a.createElement("div",{style:Object(v.a)({},e.style,{borderStyle:"solid",borderWidth:3,borderColor:e.color,position:"relative",width:"70%",marginTop:4,marginBottom:4})},r.a.createElement("div",{style:{position:"absolute",right:0,top:0,background:"black",color:"white",fontFamily:"monospace",padding:2}},"Render count: ",t.current),e.children)},N=n(5),E=n(6),x=n(8),w=n(7),P=n(9),k=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"render",value:function(){return r.a.createElement(y,{color:"red"},"Child Class Component: ",this.props.value)}}]),t}(a.Component),R=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"shouldComponentUpdate",value:function(e){return e.value!==this.props.value}},{key:"render",value:function(){return r.a.createElement(y,{color:"red"},"Child Class Component ",r.a.createElement("strong",null,"Memoized"),": ",this.props.value)}}]),t}(a.Component),T=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"render",value:function(){return r.a.createElement(y,{color:"red"},"Child Class Component: ",this.props.obj.str)}}]),t}(a.Component),S=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"render",value:function(){return r.a.createElement(y,{color:"red"},"Child Class Component: ",this.props.obj.num)}}]),t}(a.Component),M=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"shouldComponentUpdate",value:function(e){return e.obj.str!==this.props.obj.str}},{key:"render",value:function(){return r.a.createElement(y,{color:"red"},"Child Class Component ",r.a.createElement("strong",null,"Memoized"),": ",this.props.obj.str)}}]),t}(a.Component),z=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"shouldComponentUpdate",value:function(e){return e.obj.num!==this.props.obj.num}},{key:"render",value:function(){return r.a.createElement(y,{color:"red"},"Child Class Component ",r.a.createElement("strong",null,"Memoized"),": ",this.props.obj.num)}}]),t}(a.Component),F=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"render",value:function(){return r.a.createElement(y,{color:"green"},"Child Pure Component: ",this.props.value)}}]),t}(a.PureComponent),I=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"render",value:function(){return r.a.createElement(y,{color:"green"},"Child Pure Component ",r.a.createElement("strong",null,"Memoized"),": ",this.props.value)}}]),t}(a.PureComponent),D=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"render",value:function(){return r.a.createElement(y,{color:"green"},"Child Pure Component: ",this.props.obj.str)}}]),t}(a.PureComponent),U=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"render",value:function(){return r.a.createElement(y,{color:"green"},"Child Pure Component: ",this.props.obj.num)}}]),t}(a.PureComponent),J=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"shouldComponentUpdate",value:function(e){return e.obj.str!==this.props.obj.str}},{key:"render",value:function(){return r.a.createElement(y,{color:"green"},"Child Pure Component ",r.a.createElement("strong",null,"Memoized"),": ",this.props.obj.str)}}]),t}(a.PureComponent),A=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"shouldComponentUpdate",value:function(e){return e.obj.num!==this.props.obj.num}},{key:"render",value:function(){return r.a.createElement(y,{color:"green"},"Child Pure Component ",r.a.createElement("strong",null,"Memoized"),": ",this.props.obj.num)}}]),t}(a.PureComponent),W=function(e){return r.a.createElement(y,{color:"blue"},"Child Function Component: ",e.value)},V=r.a.memo((function(e){return r.a.createElement(y,{color:"blue"},"Child Function Component ",r.a.createElement("strong",null,"Memoized"),": ",e.value)})),X=function(e){return r.a.createElement(y,{color:"blue"},"Child Function Component: ",e.obj.str)},L=function(e){return r.a.createElement(y,{color:"blue"},"Child Function Component: ",e.obj.num)},B=r.a.memo((function(e){return r.a.createElement(y,{color:"blue"},"Child Function Component ",r.a.createElement("strong",null,"Memoized"),": ",e.obj.str)}),(function(e,t){return e.obj.str===t.obj.str})),q=r.a.memo((function(e){return r.a.createElement(y,{color:"blue"},"Child Function Component ",r.a.createElement("strong",null,"Memoized"),": ",e.obj.num)}),(function(e,t){return e.obj.num===t.obj.num})),H=function(e){var t=C(e.changeProps),n=Object(g.a)(t,2),o=n[0],a=n[1];return r.a.createElement(y,{color:"black"},r.a.createElement("p",null,"Container"),e.isMemoized?r.a.createElement(r.a.Fragment,null,r.a.createElement(R,{value:a}),r.a.createElement(I,{value:a}),r.a.createElement(V,{value:a})):r.a.createElement(r.a.Fragment,null,r.a.createElement(k,{value:a}),r.a.createElement(F,{value:a}),r.a.createElement(W,{value:a})),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:function(){return o()}},"Render example"))},$={},_="wrapper";function G(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(_,Object.assign({},$,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Components"),Object(o.b)("p",null,Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/react-component.html"}),Object(o.b)("inlineCode",{parentName:"a"},"React.Component"))," encapsulates ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/state-and-lifecycle.html"}),"State and Lifecycle"),"."),Object(o.b)("p",null,"There are few types o the components available in React:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Class Component")," - the component which extends ",Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://reactjs.org/docs/react-api.html#reactcomponent"}),Object(o.b)("inlineCode",{parentName:"a"},"React.Component"))," and uses OOP paradigms to handle state, properties, actions and manage component lifecycle. React component re-renders if the parent component got re-rendered even if no props were changed."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Pure Component")," - the ",Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://reactjs.org/docs/react-api.html#reactpurecomponent"}),Object(o.b)("inlineCode",{parentName:"a"},"React.PureComponent"))," is similar to the ",Object(o.b)("inlineCode",{parentName:"li"},"React.Component"),". The difference between them is that ",Object(o.b)("inlineCode",{parentName:"li"},"React.Component")," doesn\u2019t implement ",Object(o.b)("inlineCode",{parentName:"li"},"shouldComponentUpdate()"),", but ",Object(o.b)("inlineCode",{parentName:"li"},"React.PureComponent")," implements it with a ",Object(o.b)("strong",{parentName:"li"},"shallow prop and state comparison"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Function Component")," - the ",Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://reactjs.org/docs/components-and-props.html#function-and-class-components"}),Object(o.b)("inlineCode",{parentName:"a"},"React.FunctionComponent"))," is the component which takes props and renders them based on internal component logic.")),Object(o.b)("h3",null,"Regular components no props change"),Object(o.b)("p",null,"If there is no any additional work on the child components done the ",Object(o.b)("inlineCode",{parentName:"p"},"Class")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Function")," children components will re-render even if ",Object(o.b)("strong",{parentName:"p"},"no properties have been changed"),"."),Object(o.b)("p",null,"As ",Object(o.b)("inlineCode",{parentName:"p"},"Pure")," component implements shallow comparison of the props out of the box, it won't re-render."),Object(o.b)(H,{isMemoized:!1,changeProps:!1,mdxType:"Components"}),Object(o.b)("h3",null,"Regular components props change"),Object(o.b)("p",null,"If ",Object(o.b)("strong",{parentName:"p"},"any prop has been changed")," on any of the component type: ",Object(o.b)("inlineCode",{parentName:"p"},"Class"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Pure"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Function")," all of them will re-render and this is ",Object(o.b)("strong",{parentName:"p"},"expected")," behavior."),Object(o.b)(H,{isMemoized:!1,changeProps:!0,mdxType:"Components"}),Object(o.b)("h3",null,"Memoized components no props change"),Object(o.b)("p",null,'Components should be "memoized" to prevent re-rendering when no props have been changed.'),Object(o.b)("p",null,'The "memoziation" techniques described in the corresponding section of each component type.'),Object(o.b)("p",null,"The only ",Object(o.b)("inlineCode",{parentName:"p"},"Pure")," component has this functionality out of the box and no additional work for such component required."),Object(o.b)(H,{isMemoized:!0,changeProps:!1,mdxType:"Components"}),Object(o.b)("h3",null,"Memoized components props change"),Object(o.b)("p",null,"If ",Object(o.b)("strong",{parentName:"p"},"any prop has been changed")," on any of the component type: ",Object(o.b)("inlineCode",{parentName:"p"},"Class"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Pure"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Function"),' all of them will re-render even if they are "memoized" and this is ',Object(o.b)("strong",{parentName:"p"},"expected")," behavior."),Object(o.b)(H,{isMemoized:!0,changeProps:!0,mdxType:"Components"}))}G.isMDXComponent=!0;var K=function(e){var t=C(e.changeProps),n=Object(g.a)(t,2),o=n[0],a=n[1];return r.a.createElement(y,{color:"black"},r.a.createElement("p",null,"Container"),e.isMemoized?r.a.createElement(R,{value:a}):r.a.createElement(k,{value:a}),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:o},"Render example"))},Q=function(e){var t={num:1,str:"hello"},n=Object(a.useState)(t),o=Object(g.a)(n,2),c=o[0],s=o[1],l=e.changeProps?function(){return s((function(e){return{num:e.num,str:"".concat(t.str," ").concat(Math.round(100*Math.random()))}}))}:function(){return s((function(e){return{num:e.num+1,str:e.str}}))},p=e.changeProps?"str property changes, num remains unchanged: { num: ".concat(c.num,", str: ").concat(c.str," }"):"num property changes, str remains unchanged: { num: ".concat(c.num,", str: ").concat(c.str," }");return r.a.createElement(y,{color:"black"},r.a.createElement("p",null,"Container"),e.isMemoized?r.a.createElement(r.a.Fragment,null,r.a.createElement(z,{obj:c}),r.a.createElement(M,{obj:c})):r.a.createElement(r.a.Fragment,null,r.a.createElement(S,{obj:c}),r.a.createElement(T,{obj:c})),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:function(){return l()}},"Render example"),"\xa0",r.a.createElement("span",null,p))},Y={},Z="wrapper";function ee(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(Z,Object.assign({},Y,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Class Component"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Class Component")," - the component which extends ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/react-api.html#reactcomponent"}),Object(o.b)("inlineCode",{parentName:"a"},"React.Component"))," and uses OOP paradigms to handle state, properties, actions and manage component lifecycle. React component re-renders if the parent component got re-rendered even if no props were changed."),Object(o.b)("h3",null,"Regular Component - Plain props"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildClassComponent extends Component<TValue> {\n  render() {\n    // if parent component updates this component will be re-rendered \ud83d\udca3,\n    // no matter if the props have been changed or not.\n    return (\n      <RenderCounter color="red">\n        Child Class Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)(K,{isMemoized:!1,mdxType:"PlainPropsClassComponent"}),Object(o.b)("h3",null,"Solution 1: Override ",Object(o.b)("inlineCode",{parentName:"h3"},"shouldComponentUpdate()")," lifecycle method"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildClassComponentMemoized extends Component<TValue> {\n  // \u2705 place the logic to detect if component should update or not.\n  shouldComponentUpdate(nextProps: Readonly<TValue>) {\n    // \ud83d\udca1 the logic here might become very complicated,\n    // make sure you split components to the small or\n    // consider using Pure or Function components.\n    return nextProps.value !== this.props.value;\n  }\n\n  // \u2705 the component re-renders only if props have been changed.\n  render() {\n    return (\n      <RenderCounter color="red">\n        Child Class Component <strong>Memoized</strong>: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)(K,{isMemoized:!0,changeProps:!1,mdxType:"PlainPropsClassComponent"}),Object(o.b)("p",null,"and it re-renders as expected, when props have been changes."),Object(o.b)(K,{isMemoized:!0,changeProps:!0,mdxType:"PlainPropsClassComponent"}),Object(o.b)("h3",null,"Solution 2: Use Pure Component"),Object(o.b)("p",null,"Consider using Pure Component."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildPureComponent extends PureComponent<TValue> {\n  // `Pure` component implements `shouldComponentUpdate()` with a shallow prop and state comparison.\n  // That means no additional changes needed for the plain props.\n  // \u2705 Component does not re-render if parent component re-renders\n  // but the props have not been changed.\n  render() {\n    return (\n      <RenderCounter color="green">\n        Child Pure Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)("hr",null),Object(o.b)("h3",null,"Regular Component - Object props"),Object(o.b)("p",null,"Passing objects as properties to the component are dangerous in terms of causing not wanted re-rendering.\nIf component needs to work only with subset of the object properties and none of them being changed,\nthe component still might re-render if any of the other property has changed."),Object(o.b)("p",null,"Also, even if developer created the object and passes it as a parameter to the component,\nit doesn't prevent other developers to add their own properties to the same object without\neven knowing that it might have negative impact on re-rendering some other not related component."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"export type TObjectProps = {\n  obj: TObjectValue;\n};\n\nexport type TObjectValue = {\n  num: number;\n  str: string;\n};\n")),Object(o.b)("p",null,"The component takes object properties as defined above:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildClassComponentWithObjectProps extends Component<\n  TObjectProps\n> {\n  render() {\n    // The component only works with \u2705 obj.str property and ignores \u2705 obj.num\n    // If parent component doesn\'t change the \u2705 obj.str, but changes \u26d4 obj.num\n    // this component will still re-render \ud83d\udca3\n    return (\n      <RenderCounter color="red">\n        Child Class Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)("p",null,"When parent component changes ",Object(o.b)("inlineCode",{parentName:"p"},"obj.num")," and doesn't change ",Object(o.b)("inlineCode",{parentName:"p"},"obj.str"),", the component\nstill re-renders."),Object(o.b)(Q,{isMemoized:!1,mdxType:"ObjectPropsClassComponent"}),Object(o.b)("h3",null,"Solution 1: Use plain props"),Object(o.b)("p",null,"The best solution is to use plain props and pass primitive values to the component."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildClassComponentWithObjectProps extends Component<{\n  str: string;\n}> {\n  // \u2757 even is you use plain props, make sule you also override shouldComponentUpdate()\n  // othervise force update will trigger re-rendering.\n  shouldComponentUpdate(nextProps: Readonly<{ str: string }>) {\n    return nextProps.str !== this.props.str;\n  }\n\n  render() {\n    // \u2705 No object which can impact re-rendering\n    return (\n      <RenderCounter color="red">\n        Child Class Component: {this.props.str}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)("h3",null,"Solution 2: Override ",Object(o.b)("inlineCode",{parentName:"h3"},"shouldComponentUpdate()")," lifecycle method"),Object(o.b)("p",null,"When parent component changes ",Object(o.b)("inlineCode",{parentName:"p"},"obj.num")," and doesn't change ",Object(o.b)("inlineCode",{parentName:"p"},"obj.str"),", the component\n",Object(o.b)("strong",{parentName:"p"},"does not")," re-render."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildClassComponentWithObjectPropsMemoized extends Component<\n  TObjectProps\n> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    // \u2705 Make sure you cover scenario, when other developer\n    // could potentially add other fields to the props object\n    return nextProps.obj.str !== this.props.obj.str;\n  }\n\n  render() {\n    return (\n      <RenderCounter color="red">\n        Child Class Component <strong>Memoized</strong>: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)(Q,{isMemoized:!0,changeProps:!1,mdxType:"ObjectPropsClassComponent"}),Object(o.b)("p",null,"but when parent component changes ",Object(o.b)("inlineCode",{parentName:"p"},"obj.str")," re-rendering happens, as expected:"),Object(o.b)(Q,{isMemoized:!0,changeProps:!0,mdxType:"ObjectPropsClassComponent"}))}ee.isMDXComponent=!0;var te=function(e){var t=C(e.changeProps),n=Object(g.a)(t,2),o=n[0],a=n[1];return r.a.createElement(y,{color:"black"},r.a.createElement("p",null,"Container"),e.isMemoized?r.a.createElement(I,{value:a}):r.a.createElement(F,{value:a}),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:o},"Render example"))},ne=function(e){var t={num:1,str:"hello"},n=Object(a.useState)(t),o=Object(g.a)(n,2),c=o[0],s=o[1],l=e.changeProps?function(){return s((function(e){return{num:e.num,str:"".concat(t.str," ").concat(Math.round(100*Math.random()))}}))}:function(){return s((function(e){return{num:e.num+1,str:e.str}}))},p=e.changeProps?"str property changes, num remains unchanged: { num: ".concat(c.num,", str: ").concat(c.str," }"):"num property changes, str remains unchanged: { num: ".concat(c.num,", str: ").concat(c.str," }");return r.a.createElement(y,{color:"black"},r.a.createElement("p",null,"Container"),e.isMemoized?r.a.createElement(r.a.Fragment,null,r.a.createElement(A,{obj:c}),r.a.createElement(J,{obj:c})):r.a.createElement(r.a.Fragment,null,r.a.createElement(U,{obj:c}),r.a.createElement(D,{obj:c})),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:function(){return l()}},"Render example"),"\xa0",r.a.createElement("span",null,p))},oe={},ae="wrapper";function re(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(ae,Object.assign({},oe,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Pure Component"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Pure Component")," - the ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/react-api.html#reactpurecomponent"}),Object(o.b)("inlineCode",{parentName:"a"},"React.PureComponent"))," is similar to the ",Object(o.b)("inlineCode",{parentName:"p"},"React.Component"),". The difference between them is that ",Object(o.b)("inlineCode",{parentName:"p"},"React.Component")," doesn\u2019t implement ",Object(o.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate()"),", but ",Object(o.b)("inlineCode",{parentName:"p"},"React.PureComponent")," implements it with a ",Object(o.b)("strong",{parentName:"p"},"shallow prop and state comparison"),"."),Object(o.b)("p",null,"If your React component\u2019s ",Object(o.b)("inlineCode",{parentName:"p"},"render()")," function renders the same result given the same props and state, you can use ",Object(o.b)("inlineCode",{parentName:"p"},"React.PureComponent")," for a performance boost in some cases."),Object(o.b)("h3",null,"Regular Component - Plain props"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Pure")," component implements ",Object(o.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate()")," with a ",Object(o.b)("strong",{parentName:"p"},"shallow prop and state comparison"),".\nThat means no additional changes needed for the plain props."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildPureComponent extends PureComponent<TValue> {\n  // `Pure` component implements `shouldComponentUpdate()` with a **shallow prop and state comparison**.\n  // That means no additional changes needed for the plain props.\n  // \u2705 Component does not re-render if parent component re-renders\n  // but the props have not been changed.\n  render() {\n    return (\n      <RenderCounter color="green">\n        Child Pure Component: {this.props.value}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)(te,{isMemoized:!1,mdxType:"PlainPropsPureComponent"}),Object(o.b)("p",null,"and it re-renders as expected, when props have been changes."),Object(o.b)(te,{isMemoized:!0,changeProps:!0,mdxType:"PlainPropsPureComponent"}),Object(o.b)("hr",null),Object(o.b)("h3",null,"Regular Component - Object props"),Object(o.b)("p",null,"Passing objects as properties to the component are dangerous in terms of causing not wanted re-rendering.\nIf component needs to work only with subset of the object properties and none of them being changed,\nthe component still might re-render if any of the other property has changed."),Object(o.b)("p",null,"Also, even if developer created the object and passes it as a parameter to the component,\nit doesn't prevent other developers to add their own properties to the same object without\neven knowing that it might have negative impact on re-rendering some other not related component."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"export type TObjectProps = {\n  obj: TObjectValue;\n};\n\nexport type TObjectValue = {\n  num: number;\n  str: string;\n};\n")),Object(o.b)("p",null,"The component takes object properties as defined above:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildPureComponentWithObjectProps extends PureComponent<\n  TObjectProps\n> {\n  render() {\n    // The component only works with \u2705 obj.str property and ignores \u2705 obj.num\n    // If parent component doesn\'t change the \u2705 obj.str, but changes \u26d4 obj.num\n    // this component will still re-render \ud83d\udca3\n    return (\n      <RenderCounter color="red">\n        Child Pure Component: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)("p",null,"When parent component changes ",Object(o.b)("inlineCode",{parentName:"p"},"obj.num")," and doesn't change ",Object(o.b)("inlineCode",{parentName:"p"},"obj.str"),", the component\nstill re-renders. This happens, because ",Object(o.b)("inlineCode",{parentName:"p"},"PureComponent")," does a ",Object(o.b)("strong",{parentName:"p"},"shallow")," comparison."),Object(o.b)(ne,{isMemoized:!1,mdxType:"ObjectPropsPureComponent"}),Object(o.b)("h3",null,"Solution 1: Use plain props"),Object(o.b)("p",null,"The best solution is to use plain props and pass primitive values to the component."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildPureComponentWithObjectProps extends PureComponent<{\n  str: string;\n}> {\n  render() {\n    // \u2705 No object which can impact re-rendering\n    return (\n      <RenderCounter color="red">\n        Child Pure Component: {this.props.str}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)("h3",null,"Solution 2: Override ",Object(o.b)("inlineCode",{parentName:"h3"},"shouldComponentUpdate()")," lifecycle method"),Object(o.b)("p",null,"When parent component changes ",Object(o.b)("inlineCode",{parentName:"p"},"obj.num")," and doesn't change ",Object(o.b)("inlineCode",{parentName:"p"},"obj.str"),", the component\n",Object(o.b)("strong",{parentName:"p"},"does not")," re-render."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export class ChildPureComponentWithObjectPropsMemoized extends PureComponent<\n  TObjectProps\n> {\n  shouldComponentUpdate(nextProps: Readonly<TObjectProps>) {\n    // \u2705 Make sure you cover scenario, when other developer\n    // could potentially add other fields to the props object\n    return nextProps.obj.str !== this.props.obj.str;\n  }\n\n  render() {\n    return (\n      <RenderCounter color="red">\n        Child Pure Component <strong>Memoized</strong>: {this.props.obj.str}\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)(ne,{isMemoized:!0,changeProps:!1,mdxType:"ObjectPropsPureComponent"}),Object(o.b)("p",null,"but when parent component changes ",Object(o.b)("inlineCode",{parentName:"p"},"obj.str")," re-rendering happens, as expected:"),Object(o.b)(ne,{isMemoized:!0,changeProps:!0,mdxType:"ObjectPropsPureComponent"}))}re.isMDXComponent=!0;var ce=function(e){var t=C(e.changeProps),n=Object(g.a)(t,2),o=n[0],a=n[1];return r.a.createElement(y,{color:"black"},r.a.createElement("p",null,"Container"),e.isMemoized?r.a.createElement(V,{value:a}):r.a.createElement(W,{value:a}),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:o},"Render example"))},se=function(e){var t={num:1,str:"hello"},n=Object(a.useState)(t),o=Object(g.a)(n,2),c=o[0],s=o[1],l=e.changeProps?function(){return s((function(e){return{num:e.num,str:"".concat(t.str," ").concat(Math.round(100*Math.random()))}}))}:function(){return s((function(e){return{num:e.num+1,str:e.str}}))},p=e.changeProps?"str property changes, num remains unchanged: { num: ".concat(c.num,", str: ").concat(c.str," }"):"num property changes, str remains unchanged: { num: ".concat(c.num,", str: ").concat(c.str," }");return r.a.createElement(y,{color:"black"},r.a.createElement("p",null,"Container"),e.isMemoized?r.a.createElement(r.a.Fragment,null,r.a.createElement(q,{obj:c}),r.a.createElement(B,{obj:c})):r.a.createElement(r.a.Fragment,null,r.a.createElement(L,{obj:c}),r.a.createElement(X,{obj:c})),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:function(){return l()}},"Render example"),"\xa0",r.a.createElement("span",null,p))},le={},pe="wrapper";function ie(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(pe,Object.assign({},le,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Function Component"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Function Component")," - the ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/components-and-props.html#function-and-class-components"}),Object(o.b)("inlineCode",{parentName:"a"},"React.FunctionComponent"))," is the component which takes props and renders them based on internal component logic."),Object(o.b)("h3",null,"Regular Component - Plain props"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'// Component is not memoized the parent re-render triggers this component to re-render \ud83d\udca3 too\n// even if no props have been changed.\nexport const ChildFunctionComponent: FunctionComponent<TValue> = (\n  props: TValue\n) => {\n  return (\n    <RenderCounter color="blue">\n      Child Function Component: {props.value}\n    </RenderCounter>\n  );\n};\n')),Object(o.b)(ce,{isMemoized:!1,mdxType:"PlainPropsFunctionComponent"}),Object(o.b)("h3",null,"Solution: Memoize component with React.memo()"),Object(o.b)("p",null,Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/react-api.html#reactmemo"}),Object(o.b)("inlineCode",{parentName:"a"},"React.memo"))," is a higher order component. It\u2019s similar to ",Object(o.b)("inlineCode",{parentName:"p"},"React.PureComponent")," but for function components instead of classes."),Object(o.b)("p",null,"If your function component renders the same result given the same props, you can wrap it in a call to ",Object(o.b)("inlineCode",{parentName:"p"},"React.memo")," for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"React.memo")," only affects props changes. If your function component wrapped in ",Object(o.b)("inlineCode",{parentName:"p"},"React.memo")," has a ",Object(o.b)("inlineCode",{parentName:"p"},"useState")," or ",Object(o.b)("inlineCode",{parentName:"p"},"useContext")," Hook in its implementation, it will still rerender when state or context change."),Object(o.b)("p",null,"By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can also provide a custom comparison function as the second argument."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'// \u2705 Memoize component to make sure it doesn\'t re-render, when props have been changed.\nexport const ChildFunctionComponentMemoized: FunctionComponent<TValue> = React.memo<\n  FunctionComponent<TValue>\n>((props: TValue) => {\n  return (\n    <RenderCounter color="blue">\n      Child Function Component <strong>Memoized</strong>: {props.value}\n    </RenderCounter>\n  );\n});\n')),Object(o.b)(ce,{isMemoized:!0,changeProps:!1,mdxType:"PlainPropsFunctionComponent"}),Object(o.b)("p",null,"and it re-renders as expected, when props have been changes."),Object(o.b)(ce,{isMemoized:!0,changeProps:!0,mdxType:"PlainPropsFunctionComponent"}),Object(o.b)("hr",null),Object(o.b)("h3",null,"Regular Component - Object props"),Object(o.b)("p",null,"Passing objects as properties to the component are dangerous in terms of causing not wanted re-rendering.\nIf component needs to work only with subset of the object properties and none of them being changed,\nthe component still might re-render if any of the other property has changed."),Object(o.b)("p",null,"Also, even if developer created the object and passes it as a parameter to the component,\nit doesn't prevent other developers to add their own properties to the same object without\neven knowing that it might have negative impact on re-rendering some other not related component."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),"export type TObjectProps = {\n  obj: TObjectValue;\n};\n\nexport type TObjectValue = {\n  num: number;\n  str: string;\n};\n")),Object(o.b)("p",null,"The component takes object properties as defined above:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export const ChildFunctionComponentWithObjectProps: FunctionComponent<TObjectProps> = (\n  props: TObjectProps\n) => {\n  // The component only works with \u2705 obj.str property and ignores \u2705 obj.num\n  // If parent component doesn\'t change the \u2705 obj.str, but changes \u26d4 obj.num\n  // this component will still re-render \ud83d\udca3\n  return (\n    <RenderCounter color="blue">\n      Child Function Component: {props.obj.str}\n    </RenderCounter>\n  );\n};\n')),Object(o.b)("p",null,"When parent component changes ",Object(o.b)("inlineCode",{parentName:"p"},"obj.num")," and doesn't change ",Object(o.b)("inlineCode",{parentName:"p"},"obj.str"),", the component\nstill re-renders."),Object(o.b)("h3",null,"Solution 1: Use plain props"),Object(o.b)("p",null,"The best solution is to use plain props and pass primitive values to the component.\nDon't forget to memoize the props value."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'// \u2705 Memoize component to make sure it doesn\'t re-render, when props have been changed.\nexport const ChildFunctionComponentMemoized: FunctionComponent<{\n  str: strings;\n}> = React.memo<FunctionComponent<{ str: strings }>>(\n  (props: { str: strings }) => {\n    return (\n      <RenderCounter color="blue">\n        Child Function Component <strong>Memoized</strong>: {props.str}\n      </RenderCounter>\n    );\n  }\n);\n')),Object(o.b)("h2",null,"Solution 2: Add comparison function"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'export const ChildFunctionComponentWithObjectPropsMemoized: FunctionComponent<TObjectProps> = React.memo<\n  FunctionComponent<TObjectProps>\n>(\n  (props: TObjectProps) => {\n    return (\n      <RenderCounter color="blue">\n        Child Function Component <strong>Memoized</strong>: {props.obj.str}\n      </RenderCounter>\n    );\n  },\n  // \u2705 Add the properties comparison function.\n  (prevProps: Readonly<TObjectProps>, nextProps: Readonly<TObjectProps>) => {\n    return prevProps.obj.str === nextProps.obj.str;\n  }\n);\n')),Object(o.b)(se,{isMemoized:!0,changeProps:!1,mdxType:"ObjectPropsFunctionComponent"}),Object(o.b)("p",null,"but when parent component changes ",Object(o.b)("inlineCode",{parentName:"p"},"obj.str")," re-rendering happens, as expected:"),Object(o.b)(se,{isMemoized:!0,changeProps:!0,mdxType:"ObjectPropsFunctionComponent"}))}ie.isMDXComponent=!0;var me=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"strMethodComponent",value:function(){var e=this.props.str;return a.createElement(y,{color:"blue"},a.createElement("p",null,a.createElement("i",null,"str")," is ",e))}},{key:"numMethodComponent",value:function(){var e=this.props.num;return a.createElement(y,{color:"red"},a.createElement("p",null,a.createElement("i",null,"num")," is ",e))}},{key:"render",value:function(){return a.createElement(y,{color:"yellow"},a.createElement("div",null,this.strMethodComponent(),this.numMethodComponent()))}}]),t}(a.PureComponent),ue=a.memo((function(e){var t=e.str;return a.createElement(y,{color:"blue"},a.createElement("p",null,a.createElement("i",null,"str")," is ",t))})),be=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"render",value:function(){return a.createElement(y,{color:"red"},a.createElement("p",null,a.createElement("i",null,"num")," is ",this.props.num))}}]),t}(a.PureComponent),de=function(e){function t(){return Object(N.a)(this,t),Object(x.a)(this,Object(w.a)(t).apply(this,arguments))}return Object(P.a)(t,e),Object(E.a)(t,[{key:"render",value:function(){return a.createElement(y,{color:"yellow"},a.createElement("div",null,a.createElement(ue,{str:this.props.str}),a.createElement(be,{num:this.props.num})))}}]),t}(a.PureComponent),he=function(e){var t=e.isCorrect,n=a.useState(1),o=Object(g.a)(n,2),r=o[0],c=o[1],s=a.useState("1"),l=Object(g.a)(s,2),p=l[0],i=l[1];return a.createElement("div",null,t?a.createElement(de,{num:r,str:p}):a.createElement(me,{num:r,str:p}),a.createElement("button",{onClick:function(){return i((function(e){return"".concat(parseInt(e)+1)}))}},"Update `str`"),a.createElement("button",{onClick:function(){return c((function(e){return e+1}))}},"Update `num`"))},je={},Oe="wrapper";function ge(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(Oe,Object.assign({},je,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Method Component"),Object(o.b)("p",null,"Method Component is a component which was implemented as a ",Object(o.b)("strong",{parentName:"p"},"method of Class Component"),".\nImplementing components this way will cause several issues:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Hard to maintain, components become tightly coupled"),Object(o.b)("li",{parentName:"ul"},"Hard to control re-rendering conditions"),Object(o.b)("li",{parentName:"ul"},"Hard to reuse such components"),Object(o.b)("li",{parentName:"ul"},"Idiomatically React is functional and the approach is rather OOP"),Object(o.b)("li",{parentName:"ul"},"Potentially may cause hooks related bugs (",Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://kentcdodds.com/blog/dont-call-a-react-function-component"}),"https://kentcdodds.com/blog/dont-call-a-react-function-component"),")")),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'interface IClassComponentWithMethodComponentsProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponentWithMethodComponents extends React.PureComponent<\n  IClassComponentWithMethodComponentsProps\n> {\n  private strMethodComponent() {\n    const { str } = this.props;\n    return (\n      <RenderCounter color="blue">\n        <p>\n          <i>str</i> is {str}\n        </p>\n      </RenderCounter>\n    );\n  }\n  private numMethodComponent() {\n    const { num } = this.props;\n    return (\n      <RenderCounter color="red">\n        <p>\n          <i>num</i> is {num}\n        </p>\n      </RenderCounter>\n    );\n  }\n\n  render() {\n    return (\n      <RenderCounter color="yellow">\n        <div>\n          {this.strMethodComponent()}\n          {this.numMethodComponent()}\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)(he,{mdxType:"Wrapper"}),Object(o.b)("h3",null,"Solution: Separated Components"),Object(o.b)("p",null,"Every component has its scope and depends only on required props.\nIt allows us to easily refactor/remove a component and specify re-render conditions\nfor each component separately using ",Object(o.b)("inlineCode",{parentName:"p"},"React.PureComponent"),", ",Object(o.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate()")," or ",Object(o.b)("inlineCode",{parentName:"p"},"React.memo()")),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx"}),'interface IStrComponentProps {\n  str: string;\n}\nconst StrComponent = React.memo(({ str }: IStrComponentProps) => (\n  <RenderCounter color="blue">\n    <p>\n      <i>str</i> is {str}\n    </p>\n  </RenderCounter>\n));\n\ninterface INumComponentProps {\n  num: number;\n}\nclass NumComponent extends React.PureComponent<INumComponentProps> {\n  render() {\n    return (\n      <RenderCounter color="red">\n        <p>\n          <i>num</i> is {this.props.num}\n        </p>\n      </RenderCounter>\n    );\n  }\n}\n\ninterface IClassComponentProps {\n  str: string;\n  num: number;\n}\nexport class ClassComponent extends React.PureComponent<IClassComponentProps> {\n  render() {\n    return (\n      <RenderCounter color="yellow">\n        <div>\n          <StrComponent str={this.props.str} />\n          <NumComponent num={this.props.num} />\n        </div>\n      </RenderCounter>\n    );\n  }\n}\n')),Object(o.b)(he,{isCorrect:!0,mdxType:"Wrapper"}))}ge.isMDXComponent=!0;var Ce=r.a.memo((function(e){return r.a.createElement(y,{color:e.color},"A component wrapped with ",r.a.createElement("code",null,"React.memo()")," with"," ",e.memoized?"memoized":"not memoized"," callback.")})),fe=function(){var e=r.a.useCallback((function(){}),[]),t=f();return r.a.createElement(r.a.Fragment,null,r.a.createElement(Ce,{color:"green",onNoop:e,memoized:!0}),r.a.createElement(Ce,{color:"red",onNoop:function(){},memoized:!1}),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:t},"Render example"))},ve=function(){return r.a.createElement(y,{color:"red"},"A usual component")},ye=r.a.memo((function(){return r.a.createElement(y,{color:"green"},"A component wrapped with ",r.a.createElement("code",null,"React.memo()"))})),Ne=function(){var e=r.a.useCallback((function(){}),[]),t=f();return r.a.createElement(r.a.Fragment,null,r.a.createElement(ve,{onNoop:e}),r.a.createElement(ye,{onNoop:e}),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:t},"Render example"))},Ee={},xe="wrapper";function we(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(xe,Object.assign({},Ee,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Hooks"),Object(o.b)("h3",null,"Use ",Object(o.b)("inlineCode",{parentName:"h3"},"useCallback()")," hook carefully"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"In React code reviews, I see a lot of unnecessary usage of the ",Object(o.b)("inlineCode",{parentName:"p"},"useCallback()")," hook. Common misconception is that you need to use it for ",Object(o.b)("em",{parentName:"p"},"any")," callback passed as a prop to a child component. However, not true: it's a perf optimization only for when child component is pure/memo'd.")),Object(o.b)("p",null,Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://twitter.com/spikebrehm/status/1233038597734965248"}),"https://twitter.com/spikebrehm/status/1233038597734965248")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"useCallback()")," hooks allows to keep references to created functions inside components, but it should be used only for callbacks are passed to optimized child components that rely on reference equality to prevent unnecessary renders (e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate"),", ",Object(o.b)("inlineCode",{parentName:"p"},"React.memo()"),")."),Object(o.b)("p",null,"By default all React components do not use any update blockers, so there is no sense to force use ",Object(o.b)("inlineCode",{parentName:"p"},"useCallback")," for every callback in your application:"),Object(o.b)(Ne,{mdxType:"UselessUseCallback"}),Object(o.b)("p",null,"But, it makes sence to pass memoized callbacks to components that handle reference equality:"),Object(o.b)(fe,{mdxType:"ProperUseCallback"}))}we.isMDXComponent=!0;var Pe=r.a.createContext({value:1}),ke=function(e){var t=r.a.useMemo((function(){return{value:1}}),[]);return r.a.createElement(y,{color:"blue"},r.a.createElement(Pe.Provider,{value:t},r.a.createElement("div",null,r.a.createElement("code",null,"Provider: ",JSON.stringify(t,null,2))),r.a.createElement("div",null,e.children)))},Re=r.a.memo((function(){var e=r.a.useContext(Pe);return r.a.createElement(y,{color:"green"},r.a.createElement("code",null,"Consumer: ",JSON.stringify(e,null,2)))})),Te=function(){var e=f();return r.a.createElement(r.a.Fragment,null,r.a.createElement(ke,null,r.a.createElement(Re,null)),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:e},"Render example"))},Se=r.a.createContext(0),Me=r.a.createContext(0),ze=function(e){var t=e.foo,n=e.bar;return r.a.createElement(y,{color:"blue"},r.a.createElement(Se.Provider,{value:t},r.a.createElement(Me.Provider,{value:n},r.a.createElement("div",null,r.a.createElement("code",null,"Provider: ",JSON.stringify({foo:t,bar:n},null,2))),r.a.createElement("div",null,e.children))))},Fe=r.a.memo((function(){var e=r.a.useContext(Se);return r.a.createElement(y,{color:"green"},r.a.createElement("code",null,"ConsumerFoo: ",JSON.stringify(e,null,2)))})),Ie=r.a.memo((function(){var e=r.a.useContext(Me);return r.a.createElement(y,{color:"red"},r.a.createElement("code",null,"ConsumerBar: ",JSON.stringify(e,null,2)))})),De=function(){var e=r.a.useState(0),t=Object(g.a)(e,2),n=t[0],o=t[1];return r.a.createElement(r.a.Fragment,null,r.a.createElement(ze,{foo:n,bar:1},r.a.createElement(Fe,null),r.a.createElement(Ie,null)),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:function(){return o(n+1)}},"Render example"))},Ue=n(18),Je=Object(Ue.createContext)({foo:0,bar:0}),Ae=function(e){var t=e.foo,n=e.bar;return r.a.createElement(y,{color:"blue"},r.a.createElement(Je.Provider,{value:{foo:t,bar:n}},r.a.createElement("div",null,r.a.createElement("code",null,"Provider: ",JSON.stringify({foo:t,bar:n},null,2))),r.a.createElement("div",null,e.children)))},We=r.a.memo((function(){var e=Object(Ue.useContextSelector)(Je,(function(e){return e.foo}));return r.a.createElement(y,{color:"green"},r.a.createElement("code",null,"ConsumerFoo: ",JSON.stringify(e,null,2)))})),Ve=r.a.memo((function(){var e=Object(Ue.useContextSelector)(Je,(function(e){return e.bar}));return r.a.createElement(y,{color:"red"},r.a.createElement("code",null,"ConsumerBar: ",JSON.stringify(e,null,2)))})),Xe=function(){var e=r.a.useState(0),t=Object(g.a)(e,2),n=t[0],o=t[1];return r.a.createElement(r.a.Fragment,null,r.a.createElement(Ae,{foo:n,bar:1},r.a.createElement(We,null),r.a.createElement(Ve,null)),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:function(){return o(n+1)}},"Render example"))},Le=r.a.createContext({value:1}),Be=function(e){var t={value:1};return r.a.createElement(y,{color:"blue"},r.a.createElement(Le.Provider,{value:t},r.a.createElement("div",null,r.a.createElement("code",null,"Provider: ",JSON.stringify(t,null,2))),r.a.createElement("div",null,e.children)))},qe=r.a.memo((function(){var e=r.a.useContext(Le);return r.a.createElement(y,{color:"green"},r.a.createElement("code",null,"Consumer: ",JSON.stringify(e,null,2)))})),He=function(){var e=f();return r.a.createElement(r.a.Fragment,null,r.a.createElement(Be,null,r.a.createElement(qe,null)),r.a.createElement("hr",{style:{background:"transparent"}}),r.a.createElement("button",{onClick:e},"Render example"))},$e={},_e="wrapper";function Ge(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(_e,Object.assign({},$e,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Context"),Object(o.b)("p",null,"This page covers only modern React Context API, i.e. ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://reactjs.org/docs/context.html"}),Object(o.b)("inlineCode",{parentName:"a"},"createContext()")),"."),Object(o.b)("h3",null,"Context behavior"),Object(o.b)("p",null,"All consumers that are descendants of a ",Object(o.b)("inlineCode",{parentName:"p"},"Provider")," will re-render whenever the ",Object(o.b)("inlineCode",{parentName:"p"},"Provider"),"\u2019s ",Object(o.b)("inlineCode",{parentName:"p"},"value")," prop changes. The propagation from ",Object(o.b)("inlineCode",{parentName:"p"},"Provider")," to its descendant consumers (including ",Object(o.b)("inlineCode",{parentName:"p"},".contextType")," on class components and ",Object(o.b)("inlineCode",{parentName:"p"},"useContext()")," hook) is not subject to the ",Object(o.b)("inlineCode",{parentName:"p"},"shouldComponentUpdate()")," method or ",Object(o.b)("inlineCode",{parentName:"p"},"React.memo()"),", so the consumer is updated even when an ancestor component skips an update."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"// \ud83d\udca1 React.memo will ignored\nconst Example = React.memo(props => {\n  // \ud83d\udca3 Updates will be triggered inside\n  const value = React.useContext(Context);\n\n  return <div />;\n});\n")),Object(o.b)("p",null,"For example the code below will trigger rerender always as ",Object(o.b)("inlineCode",{parentName:"p"},"context")," object will be always newly created."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"const Example = props => {\n  const { children } = props;\n  // \u26d4 ({ value: 1 } === { value: 1 }) is false, so reference is different\n  const context = { value: 1 };\n\n  return <Provider value={context}>{children}</Provider>;\n};\n")),Object(o.b)(He,{mdxType:"ContextUnmemoizedExample"}),Object(o.b)("h3",null,"Solution 1: Use memoized context value"),Object(o.b)("p",null,"If value is changing rarely is good option to memoize an object value with ",Object(o.b)("inlineCode",{parentName:"p"},"useMemo()")," hook."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"const Example = props => {\n  const { children, value } = props;\n  // \u2705 Now new `context` will be recreated only on `value` change\n  const context = React.useMemo(() => ({ value }), [value]);\n\n  return <Provider value={context}>{children}</Provider>;\n};\n")),Object(o.b)(Te,{mdxType:"ContextMemoized"}),Object(o.b)("p",null,"For class components you can use ",Object(o.b)("inlineCode",{parentName:"p"},"this.state"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"class Example extends React.Component {\n  render() {\n    return <Provider value={this.state}>{children}</Provider>;\n  }\n}\n")),Object(o.b)("h3",null,"Solution 2: Use separate contexts"),Object(o.b)("p",null,"This trick was ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://kentcdodds.com/blog/how-to-use-react-context-effectively"}),"described")," by Kent Dodds. Idea is to pass plain/memoized\nvalues in separate contexts to avoid useless notifications to subscribers."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"const Example = props => {\n  const { children } = props;\n\n  // \u2757 both values are plain and safe for shallow compare\n  const firstValue = 1;\n  const secondValue = 2;\n\n  return (\n    <FirstProvider value={firstValue}>\n      <SecondProvider value={secondValue}>{children}</SecondProvider>\n    </FirstProvider>\n  );\n};\n")),Object(o.b)(De,{mdxType:"ContextSeparate"}),Object(o.b)("h3",null,"Solution 3: Experimental bits API"),Object(o.b)("p",null,"React provides an expiremental API with ",Object(o.b)("inlineCode",{parentName:"p"},"calculateChangedBits")," & ",Object(o.b)("inlineCode",{parentName:"p"},"calculateChangedBits"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"function createContext<T>(defaultValue: T, calculateChangedBits?: (prev: T, next: T) => number): Context<T>;\nfunction useContext<T>(context: Context<T>, observedBits?: number|boolean): T;\n")),Object(o.b)("p",null,"Which allows to change default behavior of Context API and avoid useless rerenders. As it's experimental there are no official docs yet, check ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://medium.com/@leonardobrunolima/react-tips-context-api-performance-considerations-d964f3ad3087"}),"this article")," to get more details."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"changedBits === 0")," has a ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/facebook/react/blob/9b0bd43550206e04bfe9ca695e5981eff0e2d03f/packages/react-reconciler/src/ReactFiberBeginWork.js#L2304"}),"special handling")," in ",Object(o.b)("inlineCode",{parentName:"p"},"react-reconciler"),", so the simplest and interesting trick is to disable any consumer's updates:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"// \u2620\ufe0f Even is `value` will change updates will be silenced\nconst Context = React.createContext(value, () => 0);\n")),Object(o.b)("p",null,Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://www.npmjs.com/package/use-context-selector"}),Object(o.b)("inlineCode",{parentName:"a"},"use-context-selector"))," uses ",Object(o.b)("inlineCode",{parentName:"p"},"changedBits === 0")," to implement selector-like API for hooks which currently stays as an ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/reactjs/rfcs/pull/119"}),"open RFC"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"const Example = React.memo(props => {\n  // \u2705 Updates of other context properties will be ignored\n  const locale = useContextSelector(LocaleContext, v => v.locale);\n\n  return <div>Current locale is {locale}.</div>;\n});\n")),Object(o.b)(Xe,{mdxType:"ContextSelectorExample"}),Object(o.b)("p",null,"There is also a lot of custom context/global state implementations, comparison\nfor Concurrent mode ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dai-shi/will-this-react-global-state-work-in-concurrent-mode"}),"available there"),"."))}Ge.isMDXComponent=!0;var Ke={},Qe="wrapper";function Ye(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(Qe,Object.assign({},Ke,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"State Immutability in React, why it is important, and how to achieve it using Immer"),Object(o.b)("p",null,"React ",Object(o.b)("em",{parentName:"p"},"props")," and ",Object(o.b)("em",{parentName:"p"},"state")," are readonly by contract; it is, however, very easy to break this contract\nand introduce issues that are difficult to debug. In order to prevent these issues it is advised not\nto mutate state unless necessary. If non-trivial mutation of the current state is unvoidable, it is\nadvised to use an immutability helper called Immer."),Object(o.b)("p",null,"In the text below we start with a piece of code\nthat doesn't work, we transform it into code that works, but is error-prone and unreadable, and eventually\nwe reach the state of well readable and easily maintainable code. As we go over these phases\nwe gradually build a case for using Immer."),Object(o.b)("h3",null,"State mutation outside of setState mechanism"),Object(o.b)("p",null,"React ",Object(o.b)("em",{parentName:"p"},"state")," is declared readonly, but that only means that the ",Object(o.b)("em",{parentName:"p"},"reference")," to it is constant. This\neffectively protects primitives from being changed, but it doesn't protect objects. The only sound\nmeans of state change in React is the ",Object(o.b)("em",{parentName:"p"},"setState")," method and any code that asserts it is correct in doing so.\nIn the example below, the ",Object(o.b)("em",{parentName:"p"},"sumData"),' function rightfully asserts that the state object will not change\nand based on that it caches its output based on the state object\'s internal field "data".'),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const data = state.data;\n  const sumData = React.useCallback(\n    () => data.reduce((acc, val) => acc + val, 0),\n    [data]\n  );\n\n  const run = () => {\n    // State mutated.\n    state.data = [1, 1];\n    // Sum is out of sync.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState({ data: state.data });\n  };\n")),Object(o.b)("p",null,"However, the ",Object(o.b)("em",{parentName:"p"},"run")," function changes the state object -- its internal field ",Object(o.b)("em",{parentName:"p"},"data")," now points to a\ndifferent address. ",Object(o.b)("em",{parentName:"p"},"sumData")," captures the original address (that wasn't supposed to change), and therefore\nit will sum the original data."),Object(o.b)("p",null,"The logical step in rectifying this seems to be to make ",Object(o.b)("em",{parentName:"p"},"sumData")," capture the entire state -- since it is\nreadonly we will be sure that we always refer to the correct address. It also seemingly makes sense not to construct\na new state object in ",Object(o.b)("em",{parentName:"p"},"run")," since we only change a single field inside of it:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const sumData = React.useCallback(\n    () => state.data.reduce((acc, val) => acc + val, 0),\n    [state]\n  );\n\n  const run = () => {\n    // State mutated.\n    state.data = [1, 1];\n    // Sum is in sync.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState(state);\n  };\n")),Object(o.b)("p",null,"The issue with this change is that now it doesn't work at all, because React asserts that since the\naddress of the state object hasn't changed, the object itself hasn't changed, and it will ignore the\nsetState call. The obvious solution is to copy the object:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),"export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState({ data: [0, 0] });\n\n  // Assert state immutability.\n  const sumData = React.useCallback(\n    () => state.data.reduce((acc, val) => acc + val, 0),\n    [state]\n  );\n\n  const run = () => {\n    state.data = [1, 1];\n    // Contract violation.\n    state.data.push(sumData());\n    state.data.push(sumData());\n    state.data.push(sumData());\n    setState({...state});\n  };\n")),Object(o.b)("p",null,'Now the code will work. The issue with this code, however, is that it is breaking the immutability contract\nwith React and that it is prone to error. If the state object were to consist of multiple nested fields,\nwe would have to make sure that the object is copied properly to form a new state. Since there is no native\nconcept of "deep copy" in javascript, doing this can be rather cumbersome:'),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState(getCumbersomeState());\n\n  const getStateString = React.useCallback(() => JSON.stringify(state), [\n    state\n  ]);\n\n  const updateJillsStreet = () => {\n    // It is easy to get lost in this sea of spread operators and brackets.\n    setState(prevState => ({\n      people: [\n        { ...prevState.people[0] },\n        {\n          ...prevState.people[1],\n          addresses: [\n            {\n              ...prevState.people[1].addresses[0],\n              street: `Street ${Math.random()}`\n            }\n          ]\n        }\n      ]\n    }));\n  };\n\n  return (\n    <div className="App">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n')),Object(o.b)("h3",null,"Immer.js to the rescue"),Object(o.b)("p",null,"And that is when Immer.js comes to the rescue. Immer.js uses ES6 proxies (note that when transcompiled to ES5\nit will become much slower) to record changes to a so called ",Object(o.b)("em",{parentName:"p"},"draft")," object during the execution of the ",Object(o.b)("em",{parentName:"p"},"produce"),"\nfunction and then project them onto a new object that becomes the new state. The ",Object(o.b)("em",{parentName:"p"},"draft")," object is based on the existing\nstate that is passed to the ",Object(o.b)("em",{parentName:"p"},"produce")," function along with the draft callback. The following snippet demonstrates\nhow we go from cumbersome, ugly, and ureadable to straightforward, beautiful, and well readable:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'export const Component: React.FunctionComponent = props => {\n  const [state, setState] = React.useState(getCumbersomeState());\n\n  const getStateString = React.useCallback(() => JSON.stringify(state), [\n    state\n  ]);\n\n  const updateJillsStreet = () => {\n    setState(\n      produce(state, _draft => {\n        _draft.people[1].addresses[0].street = `Street ${Math.random()}`;\n      })\n    );\n  };\n\n  return (\n    <div className="App">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n')),Object(o.b)("p",null,"This can be further simplified by using the ",Object(o.b)("em",{parentName:"p"},"use-immer")," npm package that provides us with a hook\nthat combines the native ",Object(o.b)("em",{parentName:"p"},"React.useState")," and Immer's ",Object(o.b)("em",{parentName:"p"},"produce"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx"}),'export const Component: React.FunctionComponent = props => {\n  const [state, setState] = useImmer(getCumbersomeState());\n\n  const getStateString = React.useCallback(() => JSON.stringify(state), [\n    state\n  ]);\n\n  const updateJillsStreet = () => {\n    setState(_draft => {\n      _draft.people[1].addresses[0].street = `Street ${Math.random()}`;\n    });\n  };\n\n  return (\n    <div className="App">\n      <div>{getStateString()}</div>\n      <div>\n        <button onClick={updateJillsStreet}>updateJillsStreet</button>\n      </div>\n    </div>\n  );\n};\n')),Object(o.b)("p",null,"In the newly created state, fields that didn't change during the execution of the draft callback\nwill be referentially equal to the fields in the original state. Only fields that were changed\nin the draft and the root object will be new objects."),Object(o.b)("h3",null,"Resources"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://immerjs.github.io/immer/docs/introduction"}),"https://immerjs.github.io/immer/docs/introduction"))))}Ye.isMDXComponent=!0;var Ze={},et="wrapper";function tt(e){var t=e.components,n=Object(d.a)(e,["components"]);return Object(o.b)(et,Object.assign({},Ze,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",null,"Useful Links"),Object(o.b)("h3",null,"Common Topics"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://reactjs.org/docs/getting-started.html"}),"React JS")," - the official ReactJS documentation."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet"}),"React+TypeScript Cheatsheets")," - Cheatsheets for experienced React developers getting started with TypeScript"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://dev.to/codeartistryio/the-react-cheatsheet-for-2020-real-world-examples-4hgg"}),"The React Cheatsheet for 2020 \ud83d\udcc4\u202c")," - The React Cheatsheet for 2020 \ud83d\udcc4\u202c (+ real-world examples)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object.assign({parentName:"li"},{href:"https://reactpatterns.com/"}),"React Patterns")," - Get the latest React patterns, tips, and tricks right to your inbox.")))}tt.isMDXComponent=!0;var nt=function(){return r.a.createElement(u.a,null,r.a.createElement("div",{className:"wrapper"},r.a.createElement("header",null,r.a.createElement("h1",null,"React Patterns")),r.a.createElement("div",{className:"main"},r.a.createElement("aside",null,r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(u.b,{to:"/"},"Overview")),r.a.createElement("li",null,r.a.createElement(u.b,{to:"/components"},"Components"),r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement(u.b,{to:"/class-component"},"Class Component")),r.a.createElement("li",null,r.a.createElement(u.b,{to:"/pure-component"},"Pure Component")),r.a.createElement("li",null,r.a.createElement(u.b,{to:"/function-component"},"Function Component")),r.a.createElement("li",null,r.a.createElement(u.b,{to:"/method-component"},"Method Component")))),r.a.createElement("li",null,r.a.createElement(u.b,{to:"/hooks"},"Hooks")),r.a.createElement("li",null,r.a.createElement(u.b,{to:"/context"},"Context")),r.a.createElement("li",null,r.a.createElement(u.b,{to:"/immutability"},"Immutability")),r.a.createElement("li",null,r.a.createElement(u.b,{to:"/links"},"Links")))),r.a.createElement("main",null,r.a.createElement(r.a.Suspense,{fallback:r.a.createElement("div",null,"Loading...")},r.a.createElement(b.c,null,r.a.createElement(b.a,{path:"/components",component:G}),r.a.createElement(b.a,{path:"/class-component",component:ee}),r.a.createElement(b.a,{path:"/pure-component",component:re}),r.a.createElement(b.a,{path:"/function-component",component:ie}),r.a.createElement(b.a,{path:"/method-component",component:ge}),r.a.createElement(b.a,{path:"/hooks",component:we}),r.a.createElement(b.a,{path:"/context",component:Ge}),r.a.createElement(b.a,{path:"/immutability",component:Ye}),r.a.createElement(b.a,{path:"/links",component:tt}),r.a.createElement(b.a,{exact:!0,path:"/",component:O}))))),r.a.createElement("footer",null,"\xa9 2019, Sergii Mykhailov. ",r.a.createElement(u.b,{to:"/"},"React Patterns"))))},ot=n(22),at=(n(41),{code:function(e){var t=e.className,n=void 0===t?"language-jsx":t,o=e.children,a=void 0===o?"":o,c=n.replace("language-",""),s=a.replace(/\n$/,"");return r.a.createElement(r.a.Fragment,null,r.a.createElement("style",null,".prism-code .token.plain { display: inline-block; }"),r.a.createElement("style",null,".prism-code .token.comment { font-style: normal; }"),r.a.createElement(ot.a,Object.assign({},ot.b,{code:s,language:c,theme:void 0}),(function(e){var t=e.className,n=e.style,o=e.tokens,a=e.getLineProps,c=e.getTokenProps;return r.a.createElement("pre",{className:t,style:Object(v.a)({},n,{padding:3})},o.map((function(e,t){return r.a.createElement("div",a({line:e,key:t}),e.map((function(e,t){return r.a.createElement("span",c({token:e,key:t}))})))})))})))}});Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));n(42);new p.a(m.a).injectStyles(),s.a.render(r.a.createElement(o.a,{components:at},r.a.createElement(nt,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},[[31,1,2]]]);
//# sourceMappingURL=main.a093a62d.chunk.js.map